/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/jangter/{productId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 판매글 상세 조회
         * @description 덕후 장터 판매글 상세 조회
         */
        get: operations["findProductDetail"];
        /**
         * 판매글 수정
         * @description 덕후 장터 판매글 수정, 기존 이미지를 삭제하거나 추가 할수 있음(스웨거 오류로 여기다 설명)
         *
         *     deleteImageUrl - 기존 글에서 삭제된 이미지 Url 리스트(문자열)
         *
         *     imageList - 추가된 이미지 리스트(이미지 파일)
         *
         */
        put: operations["updateProduct"];
        post?: never;
        /**
         * 판매글 삭제
         * @description 덕후 장터 판매글 삭제
         */
        delete: operations["deleteProduct"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/community/posts/{postId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 커뮤니티 게시글 상세 조회
         * @description 게시글의 상세 정보와 댓글을 조회합니다.
         */
        get: operations["findPostDetail"];
        /**
         * 커뮤니티 게시글 수정
         * @description 게시글 수정, 기존 이미지를 삭제하거나 추가할 수 있음(스웨거 오류로 여기다 설명)
         *
         *     deleteImageUrl - 기존 글에서 삭제된 이미지 Url 리스트(문자열)
         *
         *     imageList - 추가된 이미지 리스트(이미지 파일)
         *
         */
        put: operations["updatePost"];
        post?: never;
        /**
         * 커뮤니티 게시글 삭제
         * @description 커뮤니티 게시글 삭제
         */
        delete: operations["deletePost"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/community/comments/{commentsId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 커뮤니티 댓글 수정
         * @description 커뮤니티 댓글 수정
         */
        put: operations["updateComments"];
        post?: never;
        /**
         * 커뮤니티 댓글 삭제
         * @description 커뮤니티 댓글 삭제
         */
        delete: operations["deleteComments"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/profanity/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateProfanityFilter"];
        post?: never;
        delete: operations["deleteProfanityFilter"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 유저 등록
         * @description 유저를 등록합니다...
         */
        post: operations["registerUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shorts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 쇼츠 업로드
         * @description 파일을 스토리지에 업로드합니다.
         */
        post: operations["uploadFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shorts/{shortsId}/view": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Shorts 시청 기록
         * @description 사용자가 쇼츠를 시청한 데이터 추가. 다음 쇼츠로 넘어가거나 페이지를 벗어날 때 사용.
         */
        post: operations["createView"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shorts/{shortsId}/likes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Shorts 좋아요
         * @description 쇼츠 동영상에 로그인 한 유저가 좋아요를 누름
         */
        post: operations["addLike"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shorts/{shortsId}/likes/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Shorts 좋아요 취소
         * @description 쇼츠 동영상에 좋아요한 유저가 취소를 누름
         */
        post: operations["cancelLike"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shorts/{shortsId}/dislikes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Shorts 싫어요
         * @description 쇼츠 동영상에 로그인 한 유저가 싫어요를 누름
         */
        post: operations["addDislike"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shorts/{shortsId}/dislikes/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Shorts 싫어요 취소
         * @description 쇼츠 동영상에 싫어요한 유저가 취소를 누름
         */
        post: operations["cancelDislike"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shorts/{shortsId}/comment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 쇼츠 댓글 조회
         * @description 쇼츠 댓글을 조회합니다.
         */
        get: operations["findShortsComment"];
        put?: never;
        /**
         * 쇼츠 댓글 생성
         * @description 쇼츠 댓글을 생성합니다.
         */
        post: operations["createShortsComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shorts/{shortsId}/comment/{commentId}/reply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 쇼츠 댓글 대댓글 생성
         * @description 쇼츠 댓글 대댓글을 생성합니다.
         */
        post: operations["createShortsReply"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/jangter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 판매글 생성 생성
         * @description 덕후 장터 판매글 생성
         *
         *     imageList - 추가할 이미지 리스트(이미지 파일)
         *
         */
        post: operations["createProduct"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/community/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 커뮤니티글 전체 조회
         * @description 검색어와 정렬필터 기능이 포함된 게시글 조회
         */
        get: operations["findPostPage"];
        put?: never;
        /**
         * 커뮤니티 게시글 생성
         * @description 커뮤티니 게시글을 생성하는 기능(스웨거 오류로 여기다 설명)
         *
         *     imageList - 추가할 이미지 리스트(이미지 파일)
         *
         */
        post: operations["createPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/community/posts/{postId}/like": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 커뮤니티 게시글 좋아요
         * @description 게시글의 좋아요/좋아요 취소 기능, 동일한 토큰으로 3번 연속 반복 입력 시 10초간 lock 설정이 됨
         */
        post: operations["postLikeInteraction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/community/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 커뮤니티 댓글 작성
         * @description 커뮤니티 댓글 쓰기, 부모아이디가 null이면 댓글, 부모아이디가 있으면 부모아이디의 대댓글
         */
        post: operations["createComments"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chat/rooms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 채팅방 목록 가져오기
         * @description 사용자가 참여한 모든 채팅방 목록 조회 API입니다. 채팅방 정보, 마지막 메시지, 읽지 않은 메시지 수 등을 포함합니다. 무한 스크롤을 위한 페이징을 지원합니다.
         */
        get: operations["getChatRoomList"];
        put?: never;
        /**
         * 채팅방 생성
         * @description 새로운 채팅방을 생성합니다. 판매자는 상품 정보에서 자동으로 설정됩니다.
         */
        post: operations["createChatRoom"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chat/rooms/mark-as-read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 읽은 메세지 처리
         * @description 마지막으로 읽은 메시지 id 반환
         */
        post: operations["markMessagesAsRead"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chat/rooms/leave": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 채팅방 나가기 */
        post: operations["leaveRoom"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 카테고리 검색
         * @description 카테고리를 검색합니다. 페이징과 정렬을 지원합니다.
         */
        get: operations["searchCategories"];
        put?: never;
        /**
         * 카테고리 생성
         * @description 새로운 카테고리를 생성합니다. 카테고리 정보와 이미지를 함께 업로드해야 합니다.
         */
        post: operations["createCategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/category-bookmark/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 카테고리 상세 북마크 추가
         * @description 카테고리 상세에서 사용자가 북마크를 합니다.
         */
        post: operations["createCategoryBookmark"];
        /**
         * 카테고리 상세 북마크 삭제
         * @description 카테고리 상세에서 사용자가 북마크를 취소 합니다.
         */
        delete: operations["deleteCategoryBookmark"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bookmarks/jangter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 장터 북마크 목록 조회
         * @description 사용자의 장터 북마크 목록을 페이징하여 조회합니다. categoryId가 0인 경우 전체 목록을 조회합니다.
         */
        get: operations["getBookmarkList"];
        put?: never;
        /**
         * 장터 상품 북마크 추가
         * @description 특정 장터 상품을 북마크에 추가합니다.
         */
        post: operations["addBookmark"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 유저 로그아웃
         * @description 해당 API 호출되면 로그아웃
         */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/profanity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getProfanityFilters"];
        put?: never;
        post: operations["createProfanityFilter"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 유저 정보 조회
         * @description 유저 프로필, 닉네임, 성별, 나이대 조회
         */
        get: operations["findUserDetail"];
        put?: never;
        post?: never;
        /**
         * 유저 삭제
         * @description 유저 삭제
         */
        delete: operations["deleteUser"];
        options?: never;
        head?: never;
        /**
         * 유저 정보 수정
         * @description 유저 프로필, 닉네임 정보 수정
         */
        patch: operations["editUserDetail"];
        trace?: never;
    };
    "/api/shorts/{shortsId}/comment/{commentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 쇼츠 댓글 삭제
         * @description 쇼츠 댓글을 삭제합니다.
         */
        delete: operations["deleteShortsComment"];
        options?: never;
        head?: never;
        /**
         * 쇼츠 댓글 수정
         * @description 쇼츠 댓글을 수정합니다.
         */
        patch: operations["updateShortsComment"];
        trace?: never;
    };
    "/api/shorts/{shortsId}/comment/{commentId}/reply/{replyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 쇼츠 댓글 대댓글 삭제
         * @description 쇼츠 댓글 대댓글을 삭제합니다.
         */
        delete: operations["deleteShortsReply"];
        options?: never;
        head?: never;
        /**
         * 쇼츠 댓글 대댓글 수정
         * @description 쇼츠 댓글 대댓글을 수정합니다.
         */
        patch: operations["updateShortsReply"];
        trace?: never;
    };
    "/api/jangter/{productId}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 상품 상태 변경
         * @description 상품의 상태를 변경합니다 (판매중 -> 예약중 -> 판매완료)
         */
        patch: operations["updateProductStatus"];
        trace?: never;
    };
    "/api/user/nickname/{nickname}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 닉네임 중복여부 확인
         * @description 닉네임 중복여부 확인
         */
        get: operations["checkNickname"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-janger/{userId}/purchase": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 유저 장터 상품 구매 목록
         * @description 유저가 장터에서 구매한 물품의 목록들을 보여줍니다.
         */
        get: operations["findUserPurchases"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shorts/{shortsId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Shorts 상세 정보 조회
         * @description 쇼츠 동영상에 필요한 정보 반환
         */
        get: operations["findShortsInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shorts/recommend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 쇼츠 추천
         * @description 쇼츠를 추천합니다.
         */
        get: operations["getRecommendShorts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/market-price/weekly-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 주간 통계 조회 */
        get: operations["getWeeklyStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/market-price/similar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 유사 상품 조회 */
        get: operations["findSimilarProducts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/market-price/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 시세 조회
         * @description 키워드로 상품 시세를 조회합니다.
         */
        get: operations["searchMarketPrice"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/market-price/graph": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 시세 그래프 조회 */
        get: operations["getPriceGraph"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/jangter/{productId}/recommend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 판매글 추천
         * @description 판매글 추천 API (로그인/비로그인 모두 가능)
         */
        get: operations["recommendProduct"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/jangter/rank": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 장터 랭킹 일괄 조회
         * @description 장터 랭킹 일괄 조회
         */
        get: operations["getJangterRank"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/jangter/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 판매글 전체 조회
         * @description 덕후 장터 판매글 전체 조회
         */
        get: operations["findProductItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/itemCategory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 덕후장터 아이템 카테고리 전체 조회
         * @description API로 GET요청시 덕후장터 아이템 카테고리 ID와 NAME이 List로 반환됨
         */
        get: operations["getAllItemCategories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/community/posts/popular": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 인기 글 조회
         * @description 모든 카테고리 중 기간 별 인기글을 조회힙니다.
         */
        get: operations["getPopularityPosts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chat/rooms/{wsRoomId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 특정 채팅방 조회
         * @description 채팅방 ID로 특정 채팅방의 상세 정보를 조회합니다. 마지막 메시지, 읽지 않은 메시지 수, 참여자 정보 등을 포함합니다.
         */
        get: operations["getChatRoom"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chat/rooms/{wsRoomId}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 채팅방 메시지 이력 조회
         * @description 무한 스크롤을 위한 API입니다.
         */
        get: operations["getChatMessages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chat/rooms/unread/total": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 총 안읽음 메시지 갯수 반환
         * @description 사용자의 모든 채팅방에서 안읽은 메시지의 총 개수를 반환합니다.
         */
        get: operations["getTotalUnreadCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chat/rooms/selling": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 판매 중인 채팅방 목록 가져오기
         * @description 사용자가 판매자로 참여한 채팅방 목록 조회 API입니다.
         */
        get: operations["getSellingChatRooms"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chat/rooms/buying": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 구매 중인 채팅방 목록 가져오기
         * @description 사용자가 구매자로 참여한 채팅방 목록 조회 API입니다.
         */
        get: operations["getBuyingChatRooms"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/category/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 카테고리 상세 조회
         * @description 카테고리 ID로 상세 정보를 조회합니다.
         */
        get: operations["findCategoryById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/category/genres": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 애니메이션 장르 목록 조회
         * @description 애니메이션 장르 목록을 조회합니다.
         */
        get: operations["findAniGenres"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/category-bookmark": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 카테고리 북마크 목록
         * @description 사용자가 북마크한 목록을 보여줍니다.
         */
        get: operations["getCategoryBookmark"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bookmarks/jangter/{productId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 장터 상품 북마크 삭제
         * @description 특정 장터 상품을 북마크에서 제거합니다.
         */
        delete: operations["removeBookmark"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description 게시글 업데이트 요청 DTO */
        ProductUpdateRequestDTO: {
            /**
             * Format: int64
             * @description 카테고리 ID (필수값, 현재 1 ~ 4까지 있음)
             * @example 1
             */
            categoryId: number;
            /**
             * @description 판매글 제목 (필수값)
             * @example 편하게 테스트 제목 수정
             */
            title: string;
            /**
             * @description 판매글 본문
             * @example 편하게 테스트 본문 수정
             */
            description: string;
            /**
             * @description 가격
             * @example 50000
             */
            price: number;
            deleteImageUrl?: string[];
            imageList?: string[];
        };
        /** @description 공통 응답 */
        CommonResponseLong: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            /**
             * Format: int64
             * @description 응답 데이터
             */
            data?: number;
            error?: components["schemas"]["ExceptionDto"];
        };
        ExceptionDto: {
            /** Format: int32 */
            code: number;
            message: string;
        };
        PostUpdateRequestDTO: {
            /**
             * Format: int64
             * @description 카테고리Id(필수값, 테스트시 69나 70으로 입력)
             * @example 69
             */
            categoryId: number;
            /**
             * @description 제목(필수값)
             * @example 편하게 테스트 제목 수정!
             */
            title: string;
            /**
             * @description 내용(필수값)
             * @example 편하게 테스트 내용 수정!
             */
            content: string;
            deleteImageUrl?: string[];
            imageList?: string[];
        };
        CommentsUpdateRequestDTO: {
            /**
             * Format: int64
             * @description 게시글 ID
             * @example 17
             */
            postId: number;
            /**
             * @description 댓글 내용
             * @example 편하게 테스트 댓글 달기
             */
            content: string;
        };
        UpdateProfanityReqDTO: {
            keyword?: string;
            explaination?: string;
            /** @enum {string} */
            status: "ACTIVE" | "INACTIVE";
        };
        /** @description 공통 응답 */
        CommonResponseVoid: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            /**
             * @description 응답 데이터
             * @example 응답 데이터
             */
            data?: Record<string, never>;
            error?: components["schemas"]["ExceptionDto"];
        };
        /** @description 유저 정보 (<code>RequestRegisterUser</code> 스키마 참고) <code>Content-Type : application/json</code> */
        RequestRegisterUser: {
            /**
             * @description 유저 닉네임
             * @example looco
             */
            nickname?: string;
            /**
             * @description 유저 프로바이더 타입
             * @example {kakao , google}
             * @enum {string}
             */
            provider_type?: "KAKAO" | "NAVER" | "GOOGLE";
        };
        /** @description 공통 응답 */
        CommonResponseString: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            /**
             * @description 응답 데이터
             * @example 응답 데이터
             */
            data?: string;
            error?: components["schemas"]["ExceptionDto"];
        };
        /** @description 쇼츠 정보 */
        ShortsCreateReqDTO: {
            /** Format: binary */
            file: string;
            /**
             * @description 제목
             * @example 나의 첫 쇼츠
             */
            title: string;
            /**
             * @description 한 줄 설명
             * @example 재미있는 쇼츠입니다
             */
            description: string;
            /**
             * @description 해시태그 목록
             * @example [
             *       "애니",
             *       "재미있다",
             *       "쇼츠"
             *     ]
             */
            tags?: string[];
        };
        /** @description 쇼츠 재생 기록 생성에 필요한 객체. */
        "\uC1FC\uCE20 \uC7AC\uC0DD \uAE30\uB85D \uC694\uCCAD \uAC1D\uCCB4": {
            /**
             * @description 사용자가 쇼츠를 시청한 시간. 60초 짜리 동영상을 모두 보고 추가로 10초를 보면 시청 시간은 70초가 됨.
             * @example PT1M30S
             */
            viewTime?: {
                /** Format: int64 */
                seconds?: number;
                zero?: boolean;
                /** Format: int32 */
                nano?: number;
                negative?: boolean;
                units?: {
                    durationEstimated?: boolean;
                    duration?: {
                        /** Format: int64 */
                        seconds?: number;
                        zero?: boolean;
                        /** Format: int32 */
                        nano?: number;
                        negative?: boolean;
                    };
                    timeBased?: boolean;
                    dateBased?: boolean;
                }[];
            };
            /**
             * @description 해당 쇼츠의 총 재생 시간.
             * @example PT30S
             */
            playTime?: {
                /** Format: int64 */
                seconds?: number;
                zero?: boolean;
                /** Format: int32 */
                nano?: number;
                negative?: boolean;
                units?: {
                    durationEstimated?: boolean;
                    duration?: {
                        /** Format: int64 */
                        seconds?: number;
                        zero?: boolean;
                        /** Format: int32 */
                        nano?: number;
                        negative?: boolean;
                    };
                    timeBased?: boolean;
                    dateBased?: boolean;
                }[];
            };
        };
        /** @description 대댓글 내용 */
        ShortsCommentCreateReqDTO: {
            /**
             * @description 쇼츠 댓글 내용
             * @example 쇼츠 댓글 내용
             */
            comment?: string;
        };
        /** @description 쇼츠 댓글 대댓글 정보 */
        CommentReplyDTO: {
            /**
             * @description 쇼츠 댓글 대댓글 아이디
             * @example 쇼츠 댓글 대댓글 아이디
             */
            id?: string;
            /**
             * @description 쇼츠 댓글 대댓글 내용
             * @example 쇼츠 댓글 대댓글 내용
             */
            reply_text?: string;
            /**
             * Format: int64
             * @description 쇼츠 댓글 대댓글 작성자 아이디
             */
            user_id?: number;
            /**
             * @description 쇼츠 댓글 대댓글 작성자 닉네임
             * @example 쇼츠 댓글 대댓글 작성자 닉네임
             */
            nickname?: string;
            /**
             * @description 쇼츠 댓글 대댓글 작성자 프로필 이미지
             * @example 쇼츠 댓글 대댓글 작성자 프로필 이미지
             */
            profile_image?: string;
            /**
             * Format: date-time
             * @description 쇼츠 댓글 대댓글 생성 시간
             */
            created_at?: string;
        };
        /** @description 쇼츠 댓글 작성자 정보 */
        CommentUserDTO: {
            /**
             * Format: int64
             * @description 쇼츠 댓글 작성자 아이디
             */
            id?: number;
            /**
             * @description 쇼츠 댓글 작성자 닉네임
             * @example 쇼츠 댓글 작성자 닉네임
             */
            nickname?: string;
            /**
             * @description 쇼츠 댓글 작성자 프로필 이미지
             * @example 쇼츠 댓글 작성자 프로필 이미지
             */
            profile_image?: string;
        };
        /** @description 공통 응답 */
        CommonResponseListShortsCommentDTO: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            /**
             * @description 응답 데이터
             * @example 응답 데이터
             */
            data?: components["schemas"]["ShortsCommentDTO"][];
            error?: components["schemas"]["ExceptionDto"];
        };
        /** @description 쇼츠 댓글 응답 DTO */
        ShortsCommentDTO: {
            /**
             * @description 쇼츠 댓글 아이디
             * @example 쇼츠 댓글 아이디
             */
            id?: string;
            /**
             * @description 쇼츠 댓글 내용
             * @example 쇼츠 댓글 내용
             */
            comment?: string;
            /**
             * @description 쇼츠 아이디
             * @example 쇼츠 아이디
             */
            shorts_id?: string;
            /**
             * Format: date-time
             * @description 쇼츠 댓글 생성 시간
             */
            created_at?: string;
            user_info?: components["schemas"]["CommentUserDTO"];
            /**
             * @description 쇼츠 댓글 대댓글 목록
             * @example 쇼츠 댓글 대댓글 목록
             */
            replies?: components["schemas"]["CommentReplyDTO"][];
        };
        /** @description 덕후 장터 게시글 생성 요청 DTO */
        ProductCreateRequestDTO: {
            /**
             * Format: int64
             * @description 카테고리 ID (필수값, 현재 1 ~ 4까지 있음)
             * @example 1
             */
            categoryId: number;
            /**
             * @description 판매글 제목 (필수값)
             * @example 편하게 테스트 제목 입력
             */
            title: string;
            /**
             * @description 판매글 본문
             * @example 편하게 테스트 본문 입력
             */
            description: string;
            /**
             * @description 가격
             * @example 50000
             */
            price: number;
            imageList?: string[];
        };
        PostCreateRequestDTO: {
            /**
             * Format: int64
             * @description 카테고리Id(필수값, 테스트시 69나 70으로 입력)
             * @example 69
             */
            categoryId: number;
            /**
             * @description 제목(필수값)
             * @example 편하게 테스트 제목!
             */
            title: string;
            /**
             * @description 내용(필수값)
             * @example 편하게 테스트 내용!
             */
            content: string;
            imageList?: string[];
        };
        CommentsCreateRequestDTO: {
            /**
             * Format: int64
             * @description 게시글 ID
             * @example 17
             */
            postId: number;
            /**
             * @description 댓글 내용
             * @example 편하게 테스트 댓글 달기
             */
            content: string;
            /**
             * Format: int64
             * @description 부모 댓글 ID (null: 댓글, 댓글Id: 해당 댓글Id의 대댓글)
             */
            parentCommentId?: number;
        };
        ChatMessageResponseDTO: {
            messageId?: string;
            /** Format: int64 */
            chatRoomId?: number;
            wsRoomId?: string;
            senderId?: string;
            senderName?: string;
            content?: string;
            /** Format: date-time */
            sentAt?: string;
            formattedTime?: string;
            read?: boolean;
        };
        ChatRoomResponseDTO: {
            /** Format: int64 */
            chatRoomId?: number;
            wsRoomId?: string;
            /** Format: int64 */
            articleId?: number;
            /** Format: int64 */
            buyerId?: number;
            /** Format: int64 */
            sellerId?: number;
            buyerNickname?: string;
            sellerNickname?: string;
            lastMessage?: components["schemas"]["ChatMessageResponseDTO"];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            articleImageUrl?: string;
            /** Format: int32 */
            unreadMessageCount?: number;
            buyerProfileImageUrl?: string;
            sellerProfileImageUrl?: string;
        };
        CategoryGenreDTO: {
            /** Format: int64 */
            id?: number;
            name?: string;
        };
        CategoryImageDTO: {
            /** Format: int64 */
            id?: number;
            imageUrl?: string;
            fileName?: string;
            originalFileName?: string;
        };
        ResponseCategoryDTO: {
            /** Format: int64 */
            id?: number;
            name?: string;
            status?: string;
            createdType?: string;
            /** Format: int64 */
            viewCount?: number;
            categoryImages?: components["schemas"]["CategoryImageDTO"][];
            categoryGenres?: components["schemas"]["CategoryGenreDTO"][];
            bookmark?: boolean;
        };
        CreateProfanityReqDTO: {
            keyword: string;
            explaination: string;
        };
        /** @description 공통 응답 */
        CommonResponseCreateProfanityResDTO: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            data?: components["schemas"]["CreateProfanityResDTO"];
            error?: components["schemas"]["ExceptionDto"];
        };
        /** @description 응답 데이터 */
        CreateProfanityResDTO: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            userId?: number;
            keyword?: string;
            explaination?: string;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE";
            /** Format: date-time */
            createdAt?: string;
        };
        UserEditDTO: {
            /**
             * @description 업로드할 닉네임
             * @example 업로드할 닉네임
             */
            nickname?: string | null;
            /**
             * @description 업로드된 파일명
             * @example 업로드된 파일명
             */
            originalFileName?: string | null;
            /**
             * @description 파일 타입
             * @example 파일 타입
             */
            fileType?: string | null;
            /**
             * Format: int32
             * @description 파일용량
             */
            fileSize?: number | null;
        };
        /** @description 대댓글 내용 */
        ShortsCommentUpdateReqDTO: {
            /**
             * @description 쇼츠 댓글 내용
             * @example 쇼츠 댓글 내용
             */
            comment: string;
        };
        /**
         * @description 변경할 상품 상태
         * @example RESERVED
         * @enum {string}
         */
        ProductStatus: "FOR_SALE" | "RESERVED" | "SOLD_OUT";
        /** @description 상품 상태 변경 요청 DTO */
        ProductStatusUpdateRequestDTO: {
            status: components["schemas"]["ProductStatus"];
            /**
             * Format: int64
             * @description 판매 완료 가격 (SOLD_OUT 상태로 변경 시 필수)
             * @example 50000
             */
            soldPrice?: number;
        };
        /** @description 공통 응답 */
        CommonResponseUserDetailDTO: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            data?: components["schemas"]["UserDetailDTO"];
            error?: components["schemas"]["ExceptionDto"];
        };
        /** @description 응답 데이터 */
        UserDetailDTO: {
            nickname?: string;
            profileImg?: string;
            gender?: string;
            ageRange?: string;
        };
        /** @description 공통 응답 */
        CommonResponseBoolean: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            /**
             * @description 응답 데이터
             * @example false
             */
            data?: boolean;
            error?: components["schemas"]["ExceptionDto"];
        };
        /** @description 공통 응답 */
        CommonResponsePageImplUserPurchaseResponseDTO: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            data?: components["schemas"]["PageImplUserPurchaseResponseDTO"];
            error?: components["schemas"]["ExceptionDto"];
        };
        /** @description 응답 데이터 */
        PageImplUserPurchaseResponseDTO: {
            content?: components["schemas"]["UserPurchaseResponseDTO"][];
            pageable?: components["schemas"]["PageableObject"];
            last?: boolean;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            /** Format: int32 */
            size?: number;
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            first?: boolean;
            /** Format: int32 */
            numberOfElements?: number;
            empty?: boolean;
        };
        PageableObject: {
            /** Format: int64 */
            offset?: number;
            sort?: components["schemas"]["SortObject"];
            paged?: boolean;
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            unpaged?: boolean;
        };
        SortObject: {
            empty?: boolean;
            sorted?: boolean;
            unsorted?: boolean;
        };
        /** @description 유저 구매 목록 응답 객체 */
        UserPurchaseResponseDTO: {
            /**
             * Format: int64
             * @description 거래 완료 ID
             */
            id?: number;
            /**
             * Format: int64
             * @description 장터 글 ID
             */
            jangterId?: number;
            /**
             * @description 제목
             * @example 제목
             */
            title?: string;
            /** @description 구매가격 */
            price?: number;
            /**
             * @description 상품 카테고리 이름
             * @example 상품 카테고리 이름
             */
            categoryName?: string;
        };
        /** @description 공통 응답 */
        CommonResponseShortsResponseDTO: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            data?: components["schemas"]["ShortsResponseDTO"];
            error?: components["schemas"]["ExceptionDto"];
        };
        /** @description Shorts의 인기 지표 */
        PopularityMaticResDTO: {
            /**
             * Format: int32
             * @description 조회수
             * @example 1200
             */
            views?: number;
            /**
             * Format: int32
             * @description 댓글 수
             * @example 35
             */
            commentsCount?: number;
            /**
             * Format: int32
             * @description 좋아요 수
             * @example 300
             */
            likes?: number;
            /**
             * Format: int32
             * @description 싫어요 수
             * @example 15
             */
            dislikes?: number;
        };
        /** @description 사용자의 상호작용 정보 */
        ShortsLikeInteractionResponseDTO: {
            /**
             * @description 사용자가 좋아요를 눌렀는지 여부
             * @example true
             */
            userLike?: boolean;
            /**
             * @description 사용자가 싫어요를 눌렀는지 여부
             * @example false
             */
            userDislike?: boolean;
        };
        /** @description Shorts 정보에 대한 응답 DTO */
        ShortsResponseDTO: {
            /**
             * @description Shorts의 고유 ID
             * @example 6775805e1a08421aac32df42
             */
            shorts_id?: string;
            /**
             * @description M3U8 파일 URL
             * @example https://example.com/video.m3u8
             */
            m3u8_url?: string;
            /**
             * @description 사용자의 프로필 이미지 URL
             * @example https://example.com/user/profile.jpg
             */
            profile_img_url?: string;
            /**
             * @description 쇼츠 대한 한 줄 설명
             * @example 이 동영상은 애니메이션에 관한 내용입니다.
             */
            description?: string;
            user_like_interaction?: components["schemas"]["ShortsLikeInteractionResponseDTO"];
            popularity_matic?: components["schemas"]["PopularityMaticResDTO"];
        };
        /** @description 공통 응답 */
        CommonResponseListShortsInfoResDTO: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            /**
             * @description 응답 데이터
             * @example 응답 데이터
             */
            data?: components["schemas"]["ShortsInfoResDTO"][];
            error?: components["schemas"]["ExceptionDto"];
        };
        FileInfoDTO: {
            /** Format: int32 */
            duration?: number;
            play_url?: string;
        };
        PopularityMaticDTO: {
            /** Format: int32 */
            views?: number;
            /** Format: int32 */
            likes?: number;
            /** Format: int32 */
            comments?: number;
            /** Format: int32 */
            dislikes?: number;
        };
        /** @description 응답 데이터 */
        ShortsInfoResDTO: {
            id?: string;
            title?: string;
            description?: string;
            tags?: string[];
            file_info?: components["schemas"]["FileInfoDTO"];
            popularity_matic?: components["schemas"]["PopularityMaticDTO"];
            /** Format: date-time */
            created_at?: string;
        };
        /** @description 공통 응답 */
        CommonResponseWeeklyStatsResponseDTO: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            data?: components["schemas"]["WeeklyStatsResponseDTO"];
            error?: components["schemas"]["ExceptionDto"];
        };
        /** @description 최근 일주일 판매 통계 DTO */
        WeeklyStatsResponseDTO: {
            /**
             * @description 평균 판매가
             * @example 81750
             */
            averagePrice?: number;
            /**
             * @description 최고 판매가
             * @example 490000
             */
            highestPrice?: number;
            /**
             * @description 최저 판매가
             * @example 14000
             */
            lowestPrice?: number;
            /**
             * Format: int64
             * @description 거래 건수
             * @example 42
             */
            totalDeals?: number;
        };
        Pageable: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            sort?: string[];
        };
        /** @description 공통 응답 */
        CommonResponseListSimilarProductResponseDTO: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            /**
             * @description 응답 데이터
             * @example 응답 데이터
             */
            data?: components["schemas"]["SimilarProductResponseDTO"][];
            error?: components["schemas"]["ExceptionDto"];
        };
        /** @description 유사 상품 정보 DTO */
        SimilarProductResponseDTO: {
            /**
             * Format: int64
             * @description 상품 ID
             * @example 123
             */
            productId?: number;
            /**
             * @description 상품 제목
             * @example 원피스 루피 피규어
             */
            title?: string;
            /**
             * @description 등록 가격
             * @example 21000
             */
            price?: number;
            /**
             * @description TF-IDF 벡터 값
             * @example 0.5,0.3,0.2
             */
            tfidfVector?: string;
            /**
             * @description 대표 썸네일 URL
             * @example https://example.com/image.jpg
             */
            imageUrl?: string;
        };
        /** @description 공통 응답 */
        CommonResponseMarketPriceSearchResponseDTO: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            data?: components["schemas"]["MarketPriceSearchResponseDTO"];
            error?: components["schemas"]["ExceptionDto"];
        };
        /** @description 시세 검색 응답 DTO */
        MarketPriceSearchResponseDTO: {
            /**
             * @description 검색 키워드
             * @example 원피스 루피 피규어
             */
            keyword?: string;
            priceGraph?: components["schemas"]["PriceGraphResponseDTO"];
            weeklyStats?: components["schemas"]["WeeklyStatsResponseDTO"];
            /**
             * @description 유사 상품 목록
             * @example 유사 상품 목록
             */
            similarProducts?: components["schemas"]["SimilarProductResponseDTO"][];
            /**
             * @description 판매 완료 상품 평균 판매 가격
             * @example 45000
             */
            averageSoldPrice?: number;
        };
        /** @description 시세 데이터 포인트 */
        PriceDataPoint: {
            /**
             * Format: date
             * @description 날짜
             * @example 2024-01-01
             */
            date?: string;
            /**
             * Format: int64
             * @description 상품 ID
             * @example 1
             */
            productId?: number;
            /**
             * @description 상품 제목
             * @example 원피스 루피 피규어
             */
            title?: string;
            /**
             * @description 등록 가격
             * @example 50000
             */
            registeredPrice?: number;
            /**
             * @description 판매 가격
             * @example 45000
             */
            soldPrice?: number;
            /**
             * Format: int32
             * @description 거래 건수
             * @example 3
             */
            dealCount?: number;
        };
        /** @description 시세 그래프 응답 DTO */
        PriceGraphResponseDTO: {
            /**
             * @description 날짜별 데이터
             * @example 날짜별 데이터
             */
            dataPoints?: components["schemas"]["PriceDataPoint"][];
        };
        /** @description 공통 응답 */
        CommonResponsePriceGraphResponseDTO: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            data?: components["schemas"]["PriceGraphResponseDTO"];
            error?: components["schemas"]["ExceptionDto"];
        };
        /** @description 공통 응답 */
        CommonResponseProductFindDetailResponseDTO: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            data?: components["schemas"]["ProductFindDetailResponseDTO"];
            error?: components["schemas"]["ExceptionDto"];
        };
        /** @description 게시글 상세 조회 응답 DTO */
        ProductFindDetailResponseDTO: {
            /**
             * @description 장터글 제목
             * @example 장터글 제목
             */
            title?: string;
            /**
             * @description 장터글 내용
             * @example 장터글 내용
             */
            description?: string;
            /** @description 장터글 가격 */
            price?: number;
            status?: components["schemas"]["ProductStatus"];
            /**
             * Format: date-time
             * @description 생성일
             */
            createdAt?: string;
            /**
             * Format: int64
             * @description 조회수
             */
            viewCount?: number;
            /**
             * Format: int64
             * @description 장터 카테고리 ID
             */
            itemCategoryId?: number;
            /**
             * Format: int64
             * @description 판매자 Id
             */
            userId?: number;
            /**
             * @description 이미지 리스트
             * @example 이미지 리스트
             */
            imageUrlList?: string[];
        };
        /** @description 공통 응답 */
        CommonResponseProductRecommendResponseDTO: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            data?: components["schemas"]["ProductRecommendResponseDTO"];
            error?: components["schemas"]["ExceptionDto"];
        };
        /** @description 응답 데이터 */
        ProductRecommendResponseDTO: {
            recommendProducts?: components["schemas"]["RecommendProduct"][];
        };
        RecommendProduct: {
            /** Format: int64 */
            product_id?: number;
            title?: string;
            /** Format: int64 */
            view_count?: number;
            price?: number;
            /** Format: int64 */
            item_category_id?: number;
            thumbnail_url?: string;
            /** Format: date-time */
            created_at?: string;
        };
        /** @description 공통 응답 */
        CommonResponseProductRankInfoResponseDTO: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            data?: components["schemas"]["ProductRankInfoResponseDTO"];
            error?: components["schemas"]["ExceptionDto"];
        };
        /**
         * @description 랭킹 상품 정보
         * @example {
         *       "DAY": [
         *         {
         *           "rank_idx": 1,
         *           "product_id": 123,
         *           "product_name": "나루토 피규어",
         *           "product_image": "https://example.com/image1.jpg",
         *           "product_price": 50000,
         *           "author_name": "애니덕후"
         *         }
         *       ],
         *       "WEEK": [
         *         {
         *           "rank_idx": 1,
         *           "product_id": 456,
         *           "product_name": "원피스 피규어",
         *           "product_image": "https://example.com/image2.jpg",
         *           "product_price": 75000,
         *           "author_name": "피규어매니아"
         *         }
         *       ],
         *       "MONTH": [
         *         {
         *           "rank_idx": 1,
         *           "product_id": 789,
         *           "product_name": "건담 프라모델",
         *           "product_image": "https://example.com/image3.jpg",
         *           "product_price": 100000,
         *           "author_name": "건프라러"
         *         }
         *       ]
         *     }
         */
        ProductRankInfo: {
            /**
             * Format: int32
             * @description 랭킹 순위
             * @example 1
             */
            rank_idx?: number;
            /**
             * Format: int64
             * @description 상품 ID
             * @example 123
             */
            product_id?: number;
            /**
             * @description 상품명
             * @example 나루토 피규어
             */
            product_name?: string;
            /**
             * @description 상품 이미지 URL
             * @example https://example.com/image.jpg
             */
            product_image?: string;
            /**
             * @description 상품 가격
             * @example 50000
             */
            product_price?: number;
            /**
             * @description 작성자 닉네임
             * @example 애니덕후
             */
            author_name?: string;
        };
        /** @description 장터 랭킹 응답 DTO */
        ProductRankInfoResponseDTO: {
            /**
             * @description 기간별 랭킹 정보
             * @example {
             *       "DAY": [
             *         {
             *           "rank_idx": 1,
             *           "product_id": 123,
             *           "product_name": "나루토 피규어",
             *           "product_image": "https://example.com/image1.jpg",
             *           "product_price": 50000,
             *           "author_name": "애니덕후"
             *         }
             *       ],
             *       "WEEK": [
             *         {
             *           "rank_idx": 1,
             *           "product_id": 456,
             *           "product_name": "원피스 피규어",
             *           "product_image": "https://example.com/image2.jpg",
             *           "product_price": 75000,
             *           "author_name": "피규어매니아"
             *         }
             *       ],
             *       "MONTH": [
             *         {
             *           "rank_idx": 1,
             *           "product_id": 789,
             *           "product_name": "건담 프라모델",
             *           "product_image": "https://example.com/image3.jpg",
             *           "product_price": 100000,
             *           "author_name": "건프라러"
             *         }
             *       ]
             *     }
             */
            rank_info?: {
                [key: string]: components["schemas"]["ProductRankInfo"][];
            };
        };
        ProductFindListRequestDTO: {
            /**
             * @description 정렬 기준 (가격: price, 날짜: day)
             * @example price
             */
            sort?: string;
            /**
             * @description 정렬 기준 오른차순 (asc) 내림 차순(desc)
             * @example asc
             */
            order?: string;
            /**
             * Format: int64
             * @description 마지막으로 본 id
             * @example 0
             */
            lastId?: number;
            /**
             * Format: int32
             * @description 페이지 크기
             * @example 10
             */
            size?: number;
            /**
             * Format: int32
             * @description 최소 가격 필터
             * @example 100
             */
            minPrice?: number | null;
            /**
             * Format: int32
             * @description 최대 가격 필터
             * @example 50000000
             */
            maxPrice?: number | null;
            /**
             * Format: int64
             * @description 카테고리 ID()
             * @example 1
             */
            categoryId?: number | null;
            /**
             * @description 검색
             * @example 검색
             */
            searchKeyword?: string | null;
        };
        /** @description 공통 응답 */
        CommonResponseListProductFindListResponseDTO: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            /**
             * @description 응답 데이터
             * @example 응답 데이터
             */
            data?: components["schemas"]["ProductFindListResponseDTO"][];
            error?: components["schemas"]["ExceptionDto"];
        };
        /** @description 응답 데이터 */
        ProductFindListResponseDTO: {
            /** Format: int64 */
            id?: number;
            /**
             * @description 장터글 제목
             * @example 장터글 제목
             */
            title?: string;
            /** @description 장터글 가격 */
            price?: number;
            /**
             * @description 대표 이미지
             * @example 대표 이미지
             */
            imageUrl?: string;
            /**
             * @description 올린이 유저 이름
             * @example 올린이 유저 이름
             */
            userNickname?: string;
            /** Format: int64 */
            viewCount?: number;
            status?: components["schemas"]["ProductStatus"];
        };
        /** @description 공통 응답 */
        CommonResponseItemCategoriesResponseDTO: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            data?: components["schemas"]["ItemCategoriesResponseDTO"];
            error?: components["schemas"]["ExceptionDto"];
        };
        /** @description 응답 데이터 */
        ItemCategoriesResponseDTO: {
            /**
             * @description 아이템 카테고리 id 전체 반환
             * @example 아이템 카테고리 id 전체 반환
             */
            itemCategoryIdList?: number[];
            /**
             * @description 아이템 카테고리 이름 전체 반환
             * @example 아이템 카테고리 이름 전체 반환
             */
            itemCategoryNameList?: string[];
        };
        /** @description 공통 응답 */
        CommonResponsePostListResponseDTO: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            data?: components["schemas"]["PostListResponseDTO"];
            error?: components["schemas"]["ExceptionDto"];
        };
        /** @description 게시글 정보 */
        FindPostQueryDTO: {
            /**
             * Format: int64
             * @description 게시글 ID
             */
            id?: number;
            /**
             * Format: int64
             * @description 유저 ID
             */
            userId?: number;
            /**
             * Format: int64
             * @description 카테고리 ID
             */
            categoryId?: number;
            /**
             * @description 게시글 제목
             * @example 게시글 제목
             */
            title?: string;
            /**
             * @description 게시글 본문
             * @example 게시글 본문
             */
            content?: string;
            /**
             * @description 저장된 이미지 URL
             * @example 저장된 이미지 URL
             */
            imageUrl?: string;
            /**
             * Format: date-time
             * @description 저장된 게시글 시간(update되면 update된 시간 반영)
             */
            updatedAt?: string;
            /**
             * Format: int64
             * @description 조회수
             */
            views?: number;
            /**
             * Format: int64
             * @description 좋아요수
             */
            likes?: number;
            /**
             * @description 유저 닉네임
             * @example 유저 닉네임
             */
            userNickname?: string;
            /**
             * @description 유저 이미지
             * @example 유저 이미지
             */
            userImageUrl?: string;
        };
        /** @description 응답 데이터 */
        PostListResponseDTO: {
            /**
             * Format: int64
             * @description 해당 카테고리에 접속된 게시글 수(삭제된 글 제외)
             */
            postCount?: number;
            /**
             * Format: int32
             * @description 현재 페이지 번호(0부터 시작)
             */
            currentPage?: number;
            /**
             * Format: int32
             * @description 전체 페이지 수(0부터 시작)
             */
            totalPages?: number;
            /**
             * @description 게시글 정보
             * @example 게시글 정보
             */
            responsePostList?: components["schemas"]["FindPostQueryDTO"][];
        };
        /** @description 게시글의 댓글 목록 */
        CommentsResponseDTO: {
            /**
             * Format: int64
             * @description 댓글 ID
             */
            id?: number;
            /**
             * @description 댓글 내용
             * @example 댓글 내용
             */
            content?: string;
            /**
             * Format: date-time
             * @description 댓글 작성 시간
             */
            createdAt?: string;
            user?: components["schemas"]["UserDetailDTO"];
            /**
             * @description 댓글 소유자 여부
             * @example false
             */
            isOwner?: boolean;
            /**
             * @description 대댓글 목록
             * @example 대댓글 목록
             */
            replies?: components["schemas"]["CommentsResponseDTO"][];
        };
        /** @description 공통 응답 */
        CommonResponsePostDetailResponseDTO: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            data?: components["schemas"]["PostDetailResponseDTO"];
            error?: components["schemas"]["ExceptionDto"];
        };
        /** @description 응답 데이터 */
        PostDetailResponseDTO: {
            /**
             * Format: int64
             * @description 게시글 ID
             */
            postId?: number;
            /**
             * @description 작성자 닉네임
             * @example 작성자 닉네임
             */
            authorNickname?: string;
            /**
             * @description 작성자 프로필 이미지 URL
             * @example 작성자 프로필 이미지 URL
             */
            authorProfileUrl?: string;
            /**
             * @description 게시글 제목
             * @example 게시글 제목
             */
            title?: string;
            /**
             * @description 게시글 본문
             * @example 게시글 본문
             */
            content?: string;
            /**
             * Format: date-time
             * @description 저장된 게시글 시간(update되면 update된 시간 반영)
             */
            updateAt?: string;
            /**
             * Format: int64
             * @description 조회수
             */
            viewCount?: number;
            /**
             * @description 현재 사용자가 게시글의 작성자인지 여부
             * @example false
             */
            owner?: boolean;
            /**
             * Format: int64
             * @description 카테고리ID
             */
            categoryId?: number;
            /**
             * @description 보여줄 이미지 URL
             * @example 보여줄 이미지 URL
             */
            imageUrls?: string[];
            /**
             * @description 게시글의 댓글 목록
             * @example 게시글의 댓글 목록
             */
            comments?: components["schemas"]["CommentsResponseDTO"][];
            /**
             * Format: int64
             * @description 좋아요 수
             */
            likeCount?: number;
            /**
             * Format: int64
             * @description 총 댓글 수 (댓글 + 대댓글)
             */
            commentCount?: number;
            liked?: boolean;
        };
        /** @description 공통 응답 */
        CommonResponsePopularPostLiestRequestDTO: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            data?: components["schemas"]["PopularPostLiestRequestDTO"];
            error?: components["schemas"]["ExceptionDto"];
        };
        /** @description 인기글 목록의 항목 반환 객체 */
        PopularPostItemDTO: {
            /**
             * Format: int64
             * @description 게시글 ID
             */
            id?: number;
            /**
             * Format: int64
             * @description 유저 ID
             */
            userId?: number;
            /**
             * @description 유저 이미지 URL
             * @example 유저 이미지 URL
             */
            userImageUrl?: string;
            /**
             * Format: int64
             * @description 카테고리 ID
             */
            categoryId?: number;
            /**
             * @description 카테고리 이름
             * @example 카테고리 이름
             */
            categoryName?: string;
            /**
             * @description 게시글 제목
             * @example 게시글 제목
             */
            title?: string;
            /**
             * @description 게시글 본문
             * @example 게시글 본문
             */
            content?: string;
            /**
             * @description 저장된 이미지 URL
             * @example 저장된 이미지 URL
             */
            imageUrl?: string;
            /**
             * Format: date-time
             * @description 저장된 게시글 시간(update되면 update된 시간 반영)
             */
            updatedAt?: string;
            /**
             * Format: int64
             * @description 조회수
             */
            views?: number;
            /**
             * Format: int64
             * @description 좋아요수
             */
            likes?: number;
            /**
             * @description 유저 닉네임
             * @example 유저 닉네임
             */
            userNickname?: string;
        };
        /** @description 인기글 목록 조회 반환 객체 */
        PopularPostLiestRequestDTO: {
            popularPosts?: components["schemas"]["PopularPostItemDTO"][];
            /**
             * @description 인기글 조회 기간
             * @example 인기글 조회 기간
             * @enum {string}
             */
            period?: "TODAY" | "WEEK" | "MONTH";
        };
        ChatMessageListResponseDTO: {
            messages?: components["schemas"]["ChatMessageResponseDTO"][];
            hasMore?: boolean;
        };
        /** @description 공통 응답 */
        CommonResponseInteger: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            /**
             * Format: int32
             * @description 응답 데이터
             */
            data?: number;
            error?: components["schemas"]["ExceptionDto"];
        };
        /** @description 공통 응답 */
        CommonResponsePageResponseCategorySeachDTO: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            data?: components["schemas"]["PageResponseCategorySeachDTO"];
            error?: components["schemas"]["ExceptionDto"];
        };
        /** @description 응답 데이터 */
        PageResponseCategorySeachDTO: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["ResponseCategorySeachDTO"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            first?: boolean;
            pageable?: components["schemas"]["PageableObject"];
            last?: boolean;
            /** Format: int32 */
            numberOfElements?: number;
            empty?: boolean;
        };
        ResponseCategorySeachDTO: {
            /** Format: int64 */
            id?: number;
            name?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            status?: string;
            /** Format: int64 */
            viewCount?: number;
            /** Format: int64 */
            categoryCreateUserId?: number;
            categoryCreateNickname?: string;
            categoryCreateUserProfileImageUrl?: string;
            /** Format: int64 */
            imageId?: number;
            imageUrl?: string;
            genreId?: number[];
            genreName?: string[];
        };
        /** @description 공통 응답 */
        CommonResponseResponseCategoryDTO: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            data?: components["schemas"]["ResponseCategoryDTO"];
            error?: components["schemas"]["ExceptionDto"];
        };
        /** @description 응답 데이터 */
        AniGenreListReqDTO: {
            genres?: components["schemas"]["AniGenreResDTO"][];
        };
        AniGenreResDTO: {
            /** Format: int64 */
            id?: number;
            genreName?: string;
        };
        /** @description 공통 응답 */
        CommonResponseAniGenreListReqDTO: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            data?: components["schemas"]["AniGenreListReqDTO"];
            error?: components["schemas"]["ExceptionDto"];
        };
        /** @description 카테고리 북마크 반환 객체 */
        CategoryBookmarkDTO: {
            /**
             * Format: int64
             * @description 카테고리 북마크 ID
             */
            bookmarkId?: number;
            /**
             * Format: int64
             * @description 카테고리 ID
             */
            categoryId?: number;
            /**
             * @description 카테고리 이름
             * @example 카테고리 이름
             */
            categoryName?: string;
            /**
             * @description 카테고리 image URL
             * @example 카테고리 image URL
             */
            categoryImageUrl?: string;
        };
        /** @description 응답 데이터 */
        CategoryBookmarkReqDTO: {
            categoryBookmarks?: components["schemas"]["CategoryBookmarkDTO"][];
        };
        /** @description 공통 응답 */
        CommonResponseCategoryBookmarkReqDTO: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            data?: components["schemas"]["CategoryBookmarkReqDTO"];
            error?: components["schemas"]["ExceptionDto"];
        };
        BookmarkListResponseDTO: {
            /** Format: int64 */
            productId?: number;
            title?: string;
            price?: number;
            /** Format: int64 */
            viewCount?: number;
            /** Format: int64 */
            categoryId?: number;
            imageUrl?: string;
        };
        /** @description 공통 응답 */
        CommonResponseCustomPageResponseDTOBookmarkListResponseDTO: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            data?: components["schemas"]["CustomPageResponseDTOBookmarkListResponseDTO"];
            error?: components["schemas"]["ExceptionDto"];
        };
        /** @description 응답 데이터 */
        CustomPageResponseDTOBookmarkListResponseDTO: {
            content?: components["schemas"]["BookmarkListResponseDTO"][];
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            number?: number;
        };
        SearchProfanityReqDTO: {
            userName?: string;
            keyword?: string;
            explaination?: string;
        };
        /** @description 공통 응답 */
        CommonResponsePageProfannityResDTO: {
            /**
             * @description 성공 여부
             * @example true
             */
            success?: boolean;
            data?: components["schemas"]["PageProfannityResDTO"];
            error?: components["schemas"]["ExceptionDto"];
        };
        /** @description 응답 데이터 */
        PageProfannityResDTO: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["ProfannityResDTO"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            first?: boolean;
            pageable?: components["schemas"]["PageableObject"];
            last?: boolean;
            /** Format: int32 */
            numberOfElements?: number;
            empty?: boolean;
        };
        ProfannityResDTO: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            userId?: number;
            nickname?: string;
            keyword?: string;
            explaination?: string;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE";
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
    };
    responses: never;
    parameters: {
        /** @description 페이지 번호 0부터 시작 */
        page: string;
        /** @description 한 페이지에 들어갈 항목들의 갯수 */
        size: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    findProductDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description 판매글 ID
                 * @example 20
                 */
                productId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 게시글 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseProductFindDetailResponseDTO"];
                };
            };
            /** @description 존재하지 않는 게시글 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseProductFindDetailResponseDTO"];
                };
            };
        };
    };
    updateProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description 게시글 ID(구글 토큰 입력)
                 * @example 74
                 */
                productId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["ProductUpdateRequestDTO"];
            };
        };
        responses: {
            /** @description 게시글 수정 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
            /** @description 인증되지 않은 접근 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
            /** @description 존재하지 않는 게시글 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
            /** @description 존재하지 않는 카테고리 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
        };
    };
    deleteProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 게시글 ID */
                productId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 게시글 삭제 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
            /** @description 인증되지 않은 접근 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
            /** @description 존재하지 않는 게시글 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
            /** @description 존재하지 않는 카테고리 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
        };
    };
    findPostDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 게시글 ID */
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 게시글 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponsePostDetailResponseDTO"];
                };
            };
            /** @description 존재하지 않는 게시글 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponsePostDetailResponseDTO"];
                };
            };
        };
    };
    updatePost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description 게시글 ID(구글 테스트 토큰을 입력하세요)
                 * @example 32
                 */
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["PostUpdateRequestDTO"];
            };
        };
        responses: {
            /** @description 게시글 수정 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
            /** @description 인증되지 않은 접근 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
            /** @description 존재하지 않는 게시글 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
            /** @description 존재하지 않는 카테고리 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
        };
    };
    deletePost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 게시글 ID */
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 게시글 삭제 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
            /** @description 인증되지 않은 접근 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
            /** @description 존재하지 않는 게시글 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
            /** @description 존재하지 않는 카테고리 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
        };
    };
    updateComments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description 댓글 ID(구글 토큰 입력
                 * @example 6
                 */
                commentsId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["CommentsUpdateRequestDTO"];
            };
        };
        responses: {
            /** @description 댓글 수정 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
            /** @description 인증 되지 않은 접근 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
            /** @description 존재하지 않는 댓글 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
        };
    };
    deleteComments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 댓글 ID */
                commentsId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 댓글 수정 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
            /** @description 인증 되지 않은 접근 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
            /** @description 존재하지 않는 댓글 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
        };
    };
    updateProfanityFilter: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProfanityReqDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
        };
    };
    deleteProfanityFilter: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
        };
    };
    registerUser: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description OAuth 인증 후 발급받은 임시 토큰
                 * @example Bearer eyJhbGciOiJIUzI1NiJ9.eyJhZ2VfcmFuZ2...
                 */
                "X-Registration-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    user: components["schemas"]["RequestRegisterUser"];
                    /**
                     * Format: binary
                     * @description 프로필 이미지 파일 (png, jpg, jpeg만 가능)
                     */
                    profileImage?: string;
                };
            };
        };
        responses: {
            /** @description 유저 등록 성공 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseString"];
                };
            };
            /** @description 유효하지 않은 토큰 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseString"];
                };
            };
            /** @description 유저 이미 존재 */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseString"];
                };
            };
            /** @description 파일 업로드 실패 */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseString"];
                };
            };
        };
    };
    uploadFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["ShortsCreateReqDTO"];
            };
        };
        responses: {
            /** @description API 요청 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseString"];
                };
            };
            /** @description 입력한 값의 유효성이 올바르지 않을 때 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseString"];
                };
            };
            /** @description 사용자 로그인이 되어있지 않았을 때 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseString"];
                };
            };
        };
    };
    createView: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 쇼츠 아이디 */
                shortsId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["\uC1FC\uCE20 \uC7AC\uC0DD \uAE30\uB85D \uC694\uCCAD \uAC1D\uCCB4"];
            };
        };
        responses: {
            /** @description 쇼츠 좋아요 취소간 다 완료. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
            /** @description 회원 인증이 되지 않았습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
            /** @description 쇼츠 정보를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
        };
    };
    addLike: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 쇼츠 아이디 */
                shortsId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 쇼츠 좋아요 생성 완료. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
            /** @description 회원 인증이 되지 않았습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
            /** @description 쇼츠 정보를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
        };
    };
    cancelLike: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 쇼츠 아이디 */
                shortsId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 쇼츠 좋아요 취소 완료. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
            /** @description 회원 인증이 되지 않았습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
            /** @description 쇼츠 정보를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
        };
    };
    addDislike: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 쇼츠 아이디 */
                shortsId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 쇼츠 좋아요 생성 완료. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
            /** @description 회원 인증이 되지 않았습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
            /** @description 쇼츠 정보를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
        };
    };
    cancelDislike: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 쇼츠 아이디 */
                shortsId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 쇼츠 싫어요 취소 완료. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
            /** @description 회원 인증이 되지 않았습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
            /** @description 쇼츠 정보를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
        };
    };
    findShortsComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 쇼츠 아이디 */
                shortsId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Shorts comment : SUCCESS */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListShortsCommentDTO"];
                };
            };
        };
    };
    createShortsComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 쇼츠 아이디 */
                shortsId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShortsCommentCreateReqDTO"];
            };
        };
        responses: {
            /** @description Shorts comment : SUCCESS */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListShortsCommentDTO"];
                };
            };
            /** @description Not Found: Shorts not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListShortsCommentDTO"];
                };
            };
            /** @description Internal Server Error: Shorts save error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListShortsCommentDTO"];
                };
            };
        };
    };
    createShortsReply: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 쇼츠 아이디 */
                shortsId: string;
                /** @description 댓글 아이디 */
                commentId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShortsCommentCreateReqDTO"];
            };
        };
        responses: {
            /** @description Shorts comment reply : SUCCESS */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListShortsCommentDTO"];
                };
            };
            /** @description Not Found: Shorts comment not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListShortsCommentDTO"];
                };
            };
            /** @description Internal Server Error: Shorts comment reply save error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListShortsCommentDTO"];
                };
            };
        };
    };
    createProduct: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["ProductCreateRequestDTO"];
            };
        };
        responses: {
            /** @description 게시글 생성 성공 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
            /** @description 인증되지 않은 접근 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
            /** @description 존재하지 않는 카테고리 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
        };
    };
    findPostPage: {
        parameters: {
            query?: {
                /**
                 * @description 페이지 번호(0부터 시작)
                 * @example 0
                 */
                page?: string;
                /**
                 * @description 페이지 수
                 * @example 20
                 */
                size?: string;
                /**
                 * @description 정렬 필터와 정렬 방식,
                 *
                 *     입력 방법: 정렬 필터,정렬 방식(띄어쓰기 없어야함)
                 *
                 *     정렬 필터: id(최신순), views(조회수순)
                 *
                 *     정렬 방식: desc(내림차순, 기본값), asc(오름차순)
                 *
                 * @example id,desc
                 */
                sort?: string;
                /** @description 검색어 */
                keyword?: string;
                /** @description 카테고리 ID(기본값 1) */
                categoryId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 게시글 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponsePostListResponseDTO"];
                };
            };
        };
    };
    createPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["PostCreateRequestDTO"];
            };
        };
        responses: {
            /** @description 게시글 생성 성공 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
            /** @description 인증되지 않은 접근 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
            /** @description 존재하지 않는 카테고리 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
        };
    };
    postLikeInteraction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description 게시글 ID
                 * @example 34
                 */
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 좋아요 요청 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
            /** @description 인증되지 않는 접근 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
            /** @description 존재하지 않는 게시글 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
            /** @description 이전 요청 처리 중, 10초간 좋아요 lock */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
        };
    };
    createComments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["CommentsCreateRequestDTO"];
            };
        };
        responses: {
            /** @description 댓글 작성 성공 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
            /** @description 존재하지 않는 댓글 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseLong"];
                };
            };
        };
    };
    getChatRoomList: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 채팅방 목록 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ChatRoomResponseDTO"];
                };
            };
        };
    };
    createChatRoom: {
        parameters: {
            query: {
                /**
                 * @description 상품 ID
                 * @example 1
                 */
                articleId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 채팅방 생성 성공 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ChatRoomResponseDTO"];
                };
            };
            /** @description 잘못된 요청 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": "INVALID_INPUT_VALUE" | "INTERNAL_SERVER_ERROR" | "METHOD_ARGUMENT_TYPE_MISMATCH" | "NOT_FOUND_END_POINT" | "TOO_FAST_REQUEST" | "DATA_INTEGRITY_VIOLATION" | "DATA_LENGTH_EXCEEDED" | "USER_NOT_FOUND" | "USER_ALREADY_EXISTS" | "USER_ALREADY_DELETED" | "INVALID_TOKEN" | "EXPIRED_TOKEN" | "UNSUPPORTED_TOKEN" | "WRONG_TOKEN" | "EMPTY_TOKEN" | "UNAUTHORIZED_ACCESS" | "FORBIDDEN_ACCESS_ADMIN" | "UNSUPPORTED_PROVIDER" | "FILE_UPLOAD_ERROR" | "FILE_DOWNLOAD_ERROR" | "FILE_MAX_REGIST_EXCEED" | "FILE_SIZE_EXCEED" | "FILE_ERROR" | "FILE_NOT_FOUND" | "INVALID_FILE_FORMAT" | "FILE_DELETE_FAIL" | "NOT_FOUND_CATEGORY" | "DUPLICATE_CATEGORY_NAME" | "BLACK_USER" | "NOT_FOUND_GENRE" | "NOT_FOUND_PROFANITY_FILTER" | "INVALID_CONTENT_PROFANITY" | "DUPLICATE_PROFANITY_FILTER" | "NOT_FOUND_SHORTS" | "NOT_FOUND_SHORTS_COMMENT" | "NOT_FOUND_SHORTS_REPLY" | "INVALID_DATE_RANGE" | "MARKET_PRICE_NOT_FOUND" | "NOT_FOUND_POST" | "NOT_FOUND_COMMENTS" | "NOT_FOUND_INTERACTION" | "DUPLICATE_CHAT_ROOM" | "CHAT_ROOM_NOT_FOUND" | "INVALID_CHAT_USER" | "CHAT_MESSAGE_NOT_FOUND" | "NOT_FOUND_CATEGORY_BOOKMARK" | "INVALID_STATUS_TRANSITION" | "MISSING_SOLD_PRICE" | "UNAUTHORIZED_STATUS_UPDATE" | "INVALID_PRODUCT_STATUS" | "ALREADY_BOOKMARKED" | "PRODUCT_NOT_FOUND" | "NOT_FOUND_BOOKMARK";
                };
            };
            /** @description 이미 존재하는 채팅방 */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": "INVALID_INPUT_VALUE" | "INTERNAL_SERVER_ERROR" | "METHOD_ARGUMENT_TYPE_MISMATCH" | "NOT_FOUND_END_POINT" | "TOO_FAST_REQUEST" | "DATA_INTEGRITY_VIOLATION" | "DATA_LENGTH_EXCEEDED" | "USER_NOT_FOUND" | "USER_ALREADY_EXISTS" | "USER_ALREADY_DELETED" | "INVALID_TOKEN" | "EXPIRED_TOKEN" | "UNSUPPORTED_TOKEN" | "WRONG_TOKEN" | "EMPTY_TOKEN" | "UNAUTHORIZED_ACCESS" | "FORBIDDEN_ACCESS_ADMIN" | "UNSUPPORTED_PROVIDER" | "FILE_UPLOAD_ERROR" | "FILE_DOWNLOAD_ERROR" | "FILE_MAX_REGIST_EXCEED" | "FILE_SIZE_EXCEED" | "FILE_ERROR" | "FILE_NOT_FOUND" | "INVALID_FILE_FORMAT" | "FILE_DELETE_FAIL" | "NOT_FOUND_CATEGORY" | "DUPLICATE_CATEGORY_NAME" | "BLACK_USER" | "NOT_FOUND_GENRE" | "NOT_FOUND_PROFANITY_FILTER" | "INVALID_CONTENT_PROFANITY" | "DUPLICATE_PROFANITY_FILTER" | "NOT_FOUND_SHORTS" | "NOT_FOUND_SHORTS_COMMENT" | "NOT_FOUND_SHORTS_REPLY" | "INVALID_DATE_RANGE" | "MARKET_PRICE_NOT_FOUND" | "NOT_FOUND_POST" | "NOT_FOUND_COMMENTS" | "NOT_FOUND_INTERACTION" | "DUPLICATE_CHAT_ROOM" | "CHAT_ROOM_NOT_FOUND" | "INVALID_CHAT_USER" | "CHAT_MESSAGE_NOT_FOUND" | "NOT_FOUND_CATEGORY_BOOKMARK" | "INVALID_STATUS_TRANSITION" | "MISSING_SOLD_PRICE" | "UNAUTHORIZED_STATUS_UPDATE" | "INVALID_PRODUCT_STATUS" | "ALREADY_BOOKMARKED" | "PRODUCT_NOT_FOUND" | "NOT_FOUND_BOOKMARK";
                };
            };
        };
    };
    markMessagesAsRead: {
        parameters: {
            query: {
                wsRoomId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
        };
    };
    leaveRoom: {
        parameters: {
            query: {
                wsRoomId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
        };
    };
    searchCategories: {
        parameters: {
            query?: {
                /** @description 페이지 번호 (0부터 시작) */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
                /** @description 정렬 기준 (예: name,asc 또는 name,desc) */
                sort?: string;
                /** @description 카테고리 이름으로 검색 */
                name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponsePageResponseCategorySeachDTO"];
                };
            };
        };
    };
    createCategory: {
        parameters: {
            query: {
                ani_genre_id: number[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    category_name: string;
                    /** Format: binary */
                    image: string;
                };
            };
        };
        responses: {
            /** @description 카테고리 생성 성공 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseCategoryDTO"];
                };
            };
            /** @description 잘못된 요청 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ExceptionDto"];
                };
            };
            /** @description 인증되지 않은 사용자 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ExceptionDto"];
                };
            };
            /** @description 존재하지 않은 장르 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ExceptionDto"];
                };
            };
        };
    };
    createCategoryBookmark: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 카테고리 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
        };
    };
    deleteCategoryBookmark: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 카테고리 Id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
        };
    };
    getBookmarkList: {
        parameters: {
            query: {
                /** @description 카테고리 ID (0: 전체 조회) */
                categoryId: number;
                /** @description 페이지 번호 (0부터 시작) */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
                /** @description 정렬 기준 (예: createdAt,DESC) */
                sort?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 북마크 목록 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseCustomPageResponseDTOBookmarkListResponseDTO"];
                };
            };
            /** @description 존재하지 않는 카테고리 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseCustomPageResponseDTOBookmarkListResponseDTO"];
                };
            };
        };
    };
    addBookmark: {
        parameters: {
            query: {
                productId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 북마크 추가 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
            /** @description 상품을 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
            /** @description 이미 북마크된 상품 */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header: {
                /** @description 인증 토큰 정보 헤더에 전달 */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 로그아웃 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseString"];
                };
            };
            /** @description 인증되지 않은 접근 */
            40100: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseString"];
                };
            };
            /** @description 잘못된 토큰 */
            40103: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseString"];
                };
            };
        };
    };
    getProfanityFilters: {
        parameters: {
            query: {
                searchProfanityReqDTO: components["schemas"]["SearchProfanityReqDTO"];
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponsePageProfannityResDTO"];
                };
            };
        };
    };
    createProfanityFilter: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateProfanityReqDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseCreateProfanityResDTO"];
                };
            };
        };
    };
    findUserDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 유저 개인 id */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseUserDetailDTO"];
                };
            };
        };
    };
    deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description 유저 ID
                 * @example 1
                 */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 유저 삭제 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseString"];
                };
            };
            /** @description 존재 하지 않거나,이미 삭제된 유저입니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseString"];
                };
            };
        };
    };
    editUserDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    image?: string;
                    request: components["schemas"]["UserEditDTO"];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseString"];
                };
            };
        };
    };
    deleteShortsComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 쇼츠 아이디 */
                shortsId: string;
                /** @description 댓글 아이디 */
                commentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Shorts comment : SUCCESS */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListShortsCommentDTO"];
                };
            };
            /** @description Unauthorized: User not authenticated. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListShortsCommentDTO"];
                };
            };
            /** @description Not Found: Shorts comment not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListShortsCommentDTO"];
                };
            };
            /** @description Internal Server Error: Shorts comment delete error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListShortsCommentDTO"];
                };
            };
        };
    };
    updateShortsComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 쇼츠 아이디 */
                shortsId: string;
                /** @description 댓글 아이디 */
                commentId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShortsCommentUpdateReqDTO"];
            };
        };
        responses: {
            /** @description Shorts comment : SUCCESS */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListShortsCommentDTO"];
                };
            };
            /** @description Unauthorized: User not authenticated. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListShortsCommentDTO"];
                };
            };
            /** @description Not Found: Shorts comment not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListShortsCommentDTO"];
                };
            };
            /** @description Internal Server Error: Shorts comment update error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListShortsCommentDTO"];
                };
            };
        };
    };
    deleteShortsReply: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 쇼츠 아이디 */
                shortsId: string;
                /** @description 댓글 아이디 */
                commentId: string;
                /** @description 대댓글 아이디 */
                replyId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Shorts comment reply : SUCCESS */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListShortsCommentDTO"];
                };
            };
            /** @description Unauthorized: User not authenticated. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListShortsCommentDTO"];
                };
            };
            /** @description Not Found: Shorts comment reply not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListShortsCommentDTO"];
                };
            };
            /** @description Internal Server Error: Shorts comment reply delete error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListShortsCommentDTO"];
                };
            };
        };
    };
    updateShortsReply: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 쇼츠 아이디 */
                shortsId: string;
                /** @description 댓글 아이디 */
                commentId: string;
                /** @description 대댓글 아이디 */
                replyId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShortsCommentUpdateReqDTO"];
            };
        };
        responses: {
            /** @description Shorts comment reply : SUCCESS */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListShortsCommentDTO"];
                };
            };
            /** @description Unauthorized: User not authenticated. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListShortsCommentDTO"];
                };
            };
            /** @description Not Found: Shorts comment reply not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListShortsCommentDTO"];
                };
            };
            /** @description Internal Server Error: Shorts comment reply update error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListShortsCommentDTO"];
                };
            };
        };
    };
    updateProductStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 상품 ID */
                productId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductStatusUpdateRequestDTO"];
            };
        };
        responses: {
            /** @description 상태 변경 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
            /** @description 잘못된 상태 변경 요청 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
            /** @description 인증되지 않은 접근 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
            /** @description 상태 변경 권한 없음 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
            /** @description 존재하지 않는 상품 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
        };
    };
    checkNickname: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description 닉네임
                 * @example looco
                 */
                nickname: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 닉네임 중복여부 확인 성공 <code>true : 중복, false : 중복X</code> */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseBoolean"];
                };
            };
        };
    };
    findUserPurchases: {
        parameters: {
            query?: {
                /** @description 페이지 번호 (0부터 시작) */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
                /** @description 정렬 기준 ID, TITLE, CATEGORY_NAME, PRICE (예: ID,ASC || TITLE,DESC).  */
                sort?: string;
            };
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description API 요청 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponsePageImplUserPurchaseResponseDTO"];
                };
            };
            /** @description 입력한 값의 유효성이 올바르지 않을 때 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponsePageImplUserPurchaseResponseDTO"];
                };
            };
            /** @description 사용자 로그인이 되어있지 않았을 때 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponsePageImplUserPurchaseResponseDTO"];
                };
            };
        };
    };
    findShortsInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 조회할 쇼츠의 고유 ID */
                shortsId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 파일 정보 불러오기에 성공했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseShortsResponseDTO"];
                };
            };
            /** @description 파일 정보를 찾을 수 없습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseShortsResponseDTO"];
                };
            };
        };
    };
    getRecommendShorts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Shorts recommend : SUCCESS */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListShortsInfoResDTO"];
                };
            };
        };
    };
    getWeeklyStats: {
        parameters: {
            query: {
                /** @description 검색할 상품 키워드 */
                keyword: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseWeeklyStatsResponseDTO"];
                };
            };
        };
    };
    findSimilarProducts: {
        parameters: {
            query: {
                /** @description 검색할 상품 키워드 */
                keyword: string;
                /** @description 페이지네이션 정보 */
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListSimilarProductResponseDTO"];
                };
            };
        };
    };
    searchMarketPrice: {
        parameters: {
            query: {
                /** @description 검색 키워드 */
                keyword: string;
                /** @description 시작 날짜 (yyyy-MM-dd) */
                startDate: string;
                /** @description 종료 날짜 (yyyy-MM-dd) */
                endDate: string;
                /** @description 그래프 표시 옵션 (기본값: ALL) */
                displayOption?: "REGISTERED_PRICE_ONLY" | "SOLD_PRICE_ONLY" | "ALL";
                /** @description 정렬 방향 */
                direction?: "ASC" | "DESC";
                /** @description Zero-based page index (0..N) */
                page?: number;
                /** @description The size of the page to be returned */
                size?: number;
                /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
                sort?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseMarketPriceSearchResponseDTO"];
                };
            };
        };
    };
    getPriceGraph: {
        parameters: {
            query: {
                /** @description 검색할 상품 키워드 */
                keyword: string;
                /** @description 조회 시작 날짜 */
                fromDate: string;
                /** @description 조회 종료 날짜 */
                toDate: string;
                /** @description 그래프 표시 옵션 (ALL, REGISTERED_PRICE_ONLY, SOLD_PRICE_ONLY) */
                option?: "REGISTERED_PRICE_ONLY" | "SOLD_PRICE_ONLY" | "ALL";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponsePriceGraphResponseDTO"];
                };
            };
        };
    };
    recommendProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                productId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 게시글 추천 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseProductRecommendResponseDTO"];
                };
            };
        };
    };
    getJangterRank: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 장터 랭킹 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseProductRankInfoResponseDTO"];
                };
            };
        };
    };
    findProductItems: {
        parameters: {
            query: {
                request: components["schemas"]["ProductFindListRequestDTO"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseListProductFindListResponseDTO"];
                };
            };
        };
    };
    getAllItemCategories: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 아이템 리스트 전송 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseItemCategoriesResponseDTO"];
                };
            };
        };
    };
    getPopularityPosts: {
        parameters: {
            query: {
                /** @description 인기글 기간. WEEK(이번 주), MONTH(30일) */
                periodType: "TODAY" | "WEEK" | "MONTH";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 인기글 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponsePopularPostLiestRequestDTO"];
                };
            };
            /** @description 서버 에러 발생 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponsePopularPostLiestRequestDTO"];
                };
            };
        };
    };
    getChatRoom: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                wsRoomId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 채팅방 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ChatRoomResponseDTO"];
                };
            };
            /** @description 존재하지 않는 채팅방 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": "INVALID_INPUT_VALUE" | "INTERNAL_SERVER_ERROR" | "METHOD_ARGUMENT_TYPE_MISMATCH" | "NOT_FOUND_END_POINT" | "TOO_FAST_REQUEST" | "DATA_INTEGRITY_VIOLATION" | "DATA_LENGTH_EXCEEDED" | "USER_NOT_FOUND" | "USER_ALREADY_EXISTS" | "USER_ALREADY_DELETED" | "INVALID_TOKEN" | "EXPIRED_TOKEN" | "UNSUPPORTED_TOKEN" | "WRONG_TOKEN" | "EMPTY_TOKEN" | "UNAUTHORIZED_ACCESS" | "FORBIDDEN_ACCESS_ADMIN" | "UNSUPPORTED_PROVIDER" | "FILE_UPLOAD_ERROR" | "FILE_DOWNLOAD_ERROR" | "FILE_MAX_REGIST_EXCEED" | "FILE_SIZE_EXCEED" | "FILE_ERROR" | "FILE_NOT_FOUND" | "INVALID_FILE_FORMAT" | "FILE_DELETE_FAIL" | "NOT_FOUND_CATEGORY" | "DUPLICATE_CATEGORY_NAME" | "BLACK_USER" | "NOT_FOUND_GENRE" | "NOT_FOUND_PROFANITY_FILTER" | "INVALID_CONTENT_PROFANITY" | "DUPLICATE_PROFANITY_FILTER" | "NOT_FOUND_SHORTS" | "NOT_FOUND_SHORTS_COMMENT" | "NOT_FOUND_SHORTS_REPLY" | "INVALID_DATE_RANGE" | "MARKET_PRICE_NOT_FOUND" | "NOT_FOUND_POST" | "NOT_FOUND_COMMENTS" | "NOT_FOUND_INTERACTION" | "DUPLICATE_CHAT_ROOM" | "CHAT_ROOM_NOT_FOUND" | "INVALID_CHAT_USER" | "CHAT_MESSAGE_NOT_FOUND" | "NOT_FOUND_CATEGORY_BOOKMARK" | "INVALID_STATUS_TRANSITION" | "MISSING_SOLD_PRICE" | "UNAUTHORIZED_STATUS_UPDATE" | "INVALID_PRODUCT_STATUS" | "ALREADY_BOOKMARKED" | "PRODUCT_NOT_FOUND" | "NOT_FOUND_BOOKMARK";
                };
            };
        };
    };
    getChatMessages: {
        parameters: {
            query?: {
                messageId?: string;
                limit?: number;
            };
            header?: never;
            path: {
                wsRoomId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 메시지 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ChatMessageListResponseDTO"];
                };
            };
            /** @description 존재하지 않는 채팅방 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": "INVALID_INPUT_VALUE" | "INTERNAL_SERVER_ERROR" | "METHOD_ARGUMENT_TYPE_MISMATCH" | "NOT_FOUND_END_POINT" | "TOO_FAST_REQUEST" | "DATA_INTEGRITY_VIOLATION" | "DATA_LENGTH_EXCEEDED" | "USER_NOT_FOUND" | "USER_ALREADY_EXISTS" | "USER_ALREADY_DELETED" | "INVALID_TOKEN" | "EXPIRED_TOKEN" | "UNSUPPORTED_TOKEN" | "WRONG_TOKEN" | "EMPTY_TOKEN" | "UNAUTHORIZED_ACCESS" | "FORBIDDEN_ACCESS_ADMIN" | "UNSUPPORTED_PROVIDER" | "FILE_UPLOAD_ERROR" | "FILE_DOWNLOAD_ERROR" | "FILE_MAX_REGIST_EXCEED" | "FILE_SIZE_EXCEED" | "FILE_ERROR" | "FILE_NOT_FOUND" | "INVALID_FILE_FORMAT" | "FILE_DELETE_FAIL" | "NOT_FOUND_CATEGORY" | "DUPLICATE_CATEGORY_NAME" | "BLACK_USER" | "NOT_FOUND_GENRE" | "NOT_FOUND_PROFANITY_FILTER" | "INVALID_CONTENT_PROFANITY" | "DUPLICATE_PROFANITY_FILTER" | "NOT_FOUND_SHORTS" | "NOT_FOUND_SHORTS_COMMENT" | "NOT_FOUND_SHORTS_REPLY" | "INVALID_DATE_RANGE" | "MARKET_PRICE_NOT_FOUND" | "NOT_FOUND_POST" | "NOT_FOUND_COMMENTS" | "NOT_FOUND_INTERACTION" | "DUPLICATE_CHAT_ROOM" | "CHAT_ROOM_NOT_FOUND" | "INVALID_CHAT_USER" | "CHAT_MESSAGE_NOT_FOUND" | "NOT_FOUND_CATEGORY_BOOKMARK" | "INVALID_STATUS_TRANSITION" | "MISSING_SOLD_PRICE" | "UNAUTHORIZED_STATUS_UPDATE" | "INVALID_PRODUCT_STATUS" | "ALREADY_BOOKMARKED" | "PRODUCT_NOT_FOUND" | "NOT_FOUND_BOOKMARK";
                };
            };
        };
    };
    getTotalUnreadCount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseInteger"];
                };
            };
        };
    };
    getSellingChatRooms: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 채팅방 목록 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ChatRoomResponseDTO"];
                };
            };
        };
    };
    getBuyingChatRooms: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 채팅방 목록 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ChatRoomResponseDTO"];
                };
            };
        };
    };
    findCategoryById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 카테고리 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseResponseCategoryDTO"];
                };
            };
        };
    };
    findAniGenres: {
        parameters: {
            query?: {
                /** @description 검색 키워드 */
                keyword?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseAniGenreListReqDTO"];
                };
            };
        };
    };
    getCategoryBookmark: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseCategoryBookmarkReqDTO"];
                };
            };
        };
    };
    removeBookmark: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 북마크 해제할 상품 ID */
                productId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 북마크 삭제 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
            /** @description 존재하지 않는 북마크 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommonResponseVoid"];
                };
            };
        };
    };
}
