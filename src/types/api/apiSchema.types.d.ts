/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/jangter/{productId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 판매글 상세 조회
     * @description 덕후 장터 판매글 상세 조회
     */
    get: operations['findProductDetail'];
    /**
     * 판매글 수정
     * @description 덕후 장터 판매글 수정
     *     - updateDTO: 판매글 정보를 포함한 JSON 데이터
     *     - updateImage: 첨부할 이미지 파일 리스트 (이미지 파일, 필수값 아님)
     *
     */
    put: operations['updateProduct'];
    post?: never;
    /**
     * 판매글 삭제
     * @description 덕후 장터 판매글 삭제
     */
    delete: operations['deleteProduct'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/community/posts/{postId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 커뮤니티 게시글 상세 조회
     * @description 댓글 미개발
     */
    get: operations['findPostDetail'];
    /**
     * 커뮤니티 게시글 수정
     * @description - updatePost: 게시글 업데이트 정보를 포함한 JSON 데이터
     *     - updatePostImage: 첨부할 이미지 파일 리스트 (이미지 파일, 필수값 아님)
     *
     */
    put: operations['updatePost'];
    post?: never;
    /**
     * 커뮤니티 게시글 삭제
     * @description 커뮤니티 게시글 삭제
     */
    delete: operations['deletePost'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/community/comments/{commentsId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 커뮤니티 댓글 수정
     * @description 커뮤니티 댓글 수정
     */
    put: operations['updateComments'];
    post?: never;
    /**
     * 커뮤니티 댓글 삭제
     * @description 커뮤니티 댓글 삭제
     */
    delete: operations['deleteComments'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/profanity/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: operations['updateProfanityFilter'];
    post?: never;
    delete: operations['deleteProfanityFilter'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/file/upload': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 파일 업로드
     * @description 파일을 스토리지에 업로드합니다.
     */
    post: operations['uploadFile'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/example': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 예시 다건 조회 */
    get: operations['findExampleList'];
    put?: never;
    /** 예시 생성 */
    post: operations['createExample'];
    delete?: never;
    options?: never;
    head?: never;
    /** 예시 단건 수정 */
    patch: operations['updateExample'];
    trace?: never;
  };
  '/api/user': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 유저 등록
     * @description 유저를 등록합니다.
     */
    post: operations['registerUser'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/shorts': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 쇼츠 업로드
     * @description 파일을 스토리지에 업로드합니다.
     */
    post: operations['uploadFile_1'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/shorts/{shortsId}/likes': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Shorts 좋아요
     * @description 쇼츠 동영상에 로그인 한 유저가 좋아요를 누름
     */
    post: operations['addLike'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/shorts/{shortsId}/likes/cancel': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Shorts 좋아요 취소
     * @description 쇼츠 동영상에 좋아요한 유저가 취소를 누름
     */
    post: operations['cancelLike'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/shorts/{shortsId}/comment': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 쇼츠 댓글 조회
     * @description 쇼츠 댓글을 조회합니다.
     */
    get: operations['findShortsComment'];
    put?: never;
    /**
     * 쇼츠 댓글 생성
     * @description 쇼츠 댓글을 생성합니다.
     */
    post: operations['createShortsComment'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/shorts/{shortsId}/comment/{commentId}/reply': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 쇼츠 댓글 대댓글 생성
     * @description 쇼츠 댓글 대댓글을 생성합니다.
     */
    post: operations['createShortsReply'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/jangter': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 판매글 생성 생성
     * @description 덕후 장터 판매글 생성
     *     - createDTO: 판매글 정보를 포함한 JSON 데이터
     *     - productImage: 첨부할 이미지 파일 리스트 (이미지 파일, 필수값 아님)
     *
     */
    post: operations['createProduct'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/community/posts': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 커뮤니티글 전체 조회
     * @description - postCount: 카테고리 내부 게시글 조회된 개수(삭제된 게시글 반영),
     *     - responsePostList: 게시글 조회정보 리스트, 게시글 조회 성공 필드 확인
     *
     */
    get: operations['findAllPostList'];
    put?: never;
    /**
     * 커뮤니티 게시글 생성
     * @description - createPost: 판매글 정보를 포함한 JSON 데이터,
     *     - postImage: 첨부할 이미지 파일 리스트 (이미지 파일, 필수값 아님)
     *
     */
    post: operations['createPost'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/community/comments': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 커뮤니티 댓글 작성
     * @description 커뮤니티 댓글 쓰기, 부모아이디가 null이면 댓글, 부모아이디가 있으면 해당 댓글의 대댓글
     */
    post: operations['createComments'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/category': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 카테고리 검색
     * @description 카테고리를 검색합니다. 페이징과 정렬을 지원합니다.
     */
    get: operations['searchCategories'];
    put?: never;
    /**
     * 카테고리 생성
     * @description 새로운 카테고리를 생성합니다. 카테고리 정보와 이미지를 함께 업로드해야 합니다.
     */
    post: operations['createCategory'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/auth/logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['logout'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/profanity': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getProfanityFilters'];
    put?: never;
    post: operations['createProfanityFilter'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/user/{userId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 유저 정보 조회
     * @description 유저 프로필, 닉네임, 성별, 나이대 조회
     */
    get: operations['findUserDetail'];
    put?: never;
    post?: never;
    /**
     * 유저 삭제
     * @description 유저 삭제
     */
    delete: operations['deleteUser'];
    options?: never;
    head?: never;
    /**
     * 유저 정보 수정
     * @description 유저 프로필, 닉네임 정보 수정
     */
    patch: operations['editUserDetail'];
    trace?: never;
  };
  '/api/shorts/{shortsId}/comment/{commentId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 쇼츠 댓글 삭제
     * @description 쇼츠 댓글을 삭제합니다.
     */
    delete: operations['deleteShortsComment'];
    options?: never;
    head?: never;
    /**
     * 쇼츠 댓글 수정
     * @description 쇼츠 댓글을 수정합니다.
     */
    patch: operations['updateShortsComment'];
    trace?: never;
  };
  '/api/shorts/{shortsId}/comment/{commentId}/reply/{replyId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 쇼츠 댓글 대댓글 삭제
     * @description 쇼츠 댓글 대댓글을 삭제합니다.
     */
    delete: operations['deleteShortsReply'];
    options?: never;
    head?: never;
    /**
     * 쇼츠 댓글 대댓글 수정
     * @description 쇼츠 댓글 대댓글을 수정합니다.
     */
    patch: operations['updateShortsReply'];
    trace?: never;
  };
  '/file/download/{fileName}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 파일 다운로드
     * @description 파일을 스토리지에서 다운로드합니다.
     */
    get: operations['downloadFile'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/example/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 예시 단건 조회 */
    get: operations['findExampleById'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/example/querydsl/title': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** QueryDSL 예시 조회 */
    get: operations['findExampleByTitle'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/user/nickname/{nickname}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 닉네임 중복여부 확인
     * @description 닉네임 중복여부 확인
     */
    get: operations['checkNickname'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/shorts/{shortsId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Shorts 상세 정보 조회
     * @description 쇼츠 동영상에 필요한 정보 반환
     */
    get: operations['findShortsInfo'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/shorts/recommend': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 쇼츠 추천
     * @description 쇼츠를 추천합니다.
     */
    get: operations['getRecommendShorts'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/category/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 카테고리 상세 조회
     * @description 카테고리 ID로 상세 정보를 조회합니다.
     */
    get: operations['findCategoryById'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @description 판매글 업데이트 요청 JSON 데이터 */
    ProductUpdateRequestDTO: {
      /**
       * Format: int64
       * @description 카테고리 ID
       */
      categoryId?: number;
      /** @description 판매글 제목 */
      title?: string;
      /** @description 판매글 내용 */
      description?: string;
      /** @description 가격 */
      price?: number;
      /** @description 삭제할 이미지 URL 리스트 */
      deleteImageUrl?: string[];
    };
    CommonResponseLong: {
      success?: boolean;
      /** Format: int64 */
      data?: number;
      error?: components['schemas']['ExceptionDto'];
    };
    ExceptionDto: {
      /** Format: int32 */
      code: number;
      message: string;
    };
    /** @description 판매글 업데이트 요청 JSON 데이터 */
    PostUpdateRequestDTO: {
      /**
       * Format: int64
       * @description 카테고리Id
       */
      categoryId?: number;
      /** @description 제목 */
      title?: string;
      /** @description 내용 */
      content?: string;
      /** @description 삭제할 이미지 URL 리스트 */
      deleteImageUrl?: string[];
    };
    /** @description 댓글 수정 요청 JSON 데이터 */
    CommentsUpdateRequestDTO: {
      /**
       * Format: int64
       * @description 게시글 ID
       */
      postId: number;
      /** @description 댓글 내용 */
      content: string;
    };
    RequestUpdateProfanityDTO: {
      keyword?: string;
      explaination?: string;
      /** @enum {string} */
      status: 'ACTIVE' | 'INACTIVE';
    };
    CommonResponseVoid: {
      success?: boolean;
      data?: Record<string, never>;
      error?: components['schemas']['ExceptionDto'];
    };
    /** @description 예제 생성 요청 */
    ExampleCreateRequest: {
      /**
       * @description 예제 제목
       * @example 예제 제목입니다.
       */
      exampleTitle: string;
      /**
       * @description 예제 내용
       * @example 예제 내용입니다.
       */
      exampleContent: string;
    };
    CommonResponseString: {
      success?: boolean;
      data?: string;
      error?: components['schemas']['ExceptionDto'];
    };
    /** @description 유저 정보 (<code>RequestRegisterUser</code> 스키마 참고) <code>Content-Type : application/json</code> */
    RequestRegisterUser: {
      /**
       * @description 유저 닉네임
       * @example looco
       */
      nickname?: string;
      /**
       * @description 유저 프로바이더 타입
       * @example {kakao , google}
       * @enum {string}
       */
      provider_type?: 'KAKAO' | 'NAVER' | 'GOOGLE';
    };
    /** @description Shorts 생성 요청 객체 */
    ShortsCreateReqDTO: {
      /** Format: binary */
      file: string;
      /** @description 제목 */
      title: string;
      /** @description 한 줄 설명 */
      description: string;
      /** @description 해시태그 목록 */
      tags: string[];
    };
    /** @description 대댓글 내용 */
    ShortsCommentCreateReqDTO: {
      /** @description 쇼츠 댓글 내용 */
      comment?: string;
    };
    /** @description 쇼츠 댓글 대댓글 목록 */
    CommentReplyDTO: {
      /** @description 쇼츠 댓글 대댓글 아이디 */
      id?: string;
      /** @description 쇼츠 댓글 대댓글 내용 */
      reply_text?: string;
      /**
       * Format: int64
       * @description 쇼츠 댓글 대댓글 작성자 아이디
       */
      user_id?: number;
      /**
       * Format: date-time
       * @description 쇼츠 댓글 대댓글 생성 시간
       */
      created_at?: string;
    };
    /** @description 쇼츠 댓글 작성자 정보 */
    CommentUserDTO: {
      /**
       * Format: int64
       * @description 쇼츠 댓글 작성자 아이디
       */
      id?: number;
      /** @description 쇼츠 댓글 작성자 닉네임 */
      nickname?: string;
      /** @description 쇼츠 댓글 작성자 프로필 이미지 */
      profile_image?: string;
    };
    CommonResponseListShortsCommentDTO: {
      success?: boolean;
      data?: components['schemas']['ShortsCommentDTO'][];
      error?: components['schemas']['ExceptionDto'];
    };
    /** @description 쇼츠 댓글 응답 DTO */
    ShortsCommentDTO: {
      /** @description 쇼츠 댓글 아이디 */
      id?: string;
      /** @description 쇼츠 댓글 내용 */
      comment?: string;
      /** @description 쇼츠 아이디 */
      shorts_id?: string;
      /**
       * Format: date-time
       * @description 쇼츠 댓글 생성 시간
       */
      created_at?: string;
      user_info?: components['schemas']['CommentUserDTO'];
      /** @description 쇼츠 댓글 대댓글 목록 */
      replies?: components['schemas']['CommentReplyDTO'][];
    };
    /** @description 판매글 생성 요청 JSON 데이터 */
    ProductCreateRequestDTO: {
      /**
       * Format: int64
       * @description 카테고리 ID
       */
      categoryId: number;
      /** @description 판매글 제목 */
      title: string;
      /** @description 판매글 본문 */
      description: string;
      /** @description 가격 */
      price: number;
    };
    /** @description 커뮤니티 생성 요청 JSON 데이터 */
    PostCreateRequestDTO: {
      /**
       * Format: int64
       * @description 카테고리Id
       */
      categoryId?: number;
      /** @description 제목 */
      title?: string;
      /** @description 내용 */
      content?: string;
    };
    /** @description 판매글 생성 요청 JSON 데이터 */
    CommentsCreateRequestDTO: {
      /**
       * Format: int64
       * @description 게시글 ID
       */
      postId: number;
      /** @description 댓글 내용 */
      content: string;
      /**
       * Format: int64
       * @description 부모 댓글 ID (null일 경우 댓글, 값이 있는 경우 해당 댓글의 대댓글)
       */
      parentCommentId?: number;
    };
    /** @description 카테고리 정보 <code>RequestCategoryCreateDTO</code> 스키마 참고 <code>Content-Type: application/json</code> */
    RequestCategoryCreateDTO: {
      category_name?: string;
      ani_genre_id?: number[];
    };
    CategoryGenreDTO: {
      /** Format: int64 */
      id?: number;
      name?: string;
    };
    CategoryImageDTO: {
      /** Format: int64 */
      id?: number;
      imageUrl?: string;
      fileName?: string;
      originalFileName?: string;
    };
    ResponseCategoryDTO: {
      /** Format: int64 */
      id?: number;
      name?: string;
      status?: string;
      createdType?: string;
      /** Format: int64 */
      viewCount?: number;
      categoryImages?: components['schemas']['CategoryImageDTO'][];
      categoryGenres?: components['schemas']['CategoryGenreDTO'][];
    };
    RequestCreateProfanityDTO: {
      keyword: string;
      explaination: string;
    };
    CommonResponseResponseCreateProfanityDTO: {
      success?: boolean;
      data?: components['schemas']['ResponseCreateProfanityDTO'];
      error?: components['schemas']['ExceptionDto'];
    };
    ResponseCreateProfanityDTO: {
      /** Format: int64 */
      id?: number;
      /** Format: int64 */
      userId?: number;
      keyword?: string;
      explaination?: string;
      /** @enum {string} */
      status?: 'ACTIVE' | 'INACTIVE';
      /** Format: date-time */
      createdAt?: string;
    };
    /** @description 예제 생성 요청 */
    ExampleUpdateRequest: {
      /**
       * Format: uuid
       * @description 예제 ID
       */
      exampleId?: string;
      /**
       * @description 예제 제목수정
       * @example 예제 제목수정.
       */
      exampleTitle: string;
      /**
       * @description 예제 내용 수정
       * @example 예제 내용수정.
       */
      exampleContent: string;
    };
    /** @description 대댓글 내용 */
    ShortsCommentUpdateReqDTO: {
      /** @description 쇼츠 댓글 내용 */
      comment: string;
    };
    CommonResponseListExampleDetailResponse: {
      success?: boolean;
      data?: components['schemas']['ExampleDetailResponse'][];
      error?: components['schemas']['ExceptionDto'];
    };
    /** @description 예제 상세 응답 */
    ExampleDetailResponse: {
      /**
       * Format: uuid
       * @description 예제 ID
       * @example 2be8119a-b655-419c-92c9-7db023432041
       */
      exampleId?: string;
      /**
       * @description 예제 제목
       * @example 예제 제목입니다.
       */
      exampleTitle?: string;
      /**
       * @description 예제 내용
       * @example 예제 내용입니다.
       */
      exampleContent?: string;
    };
    CommonResponseExampleDetailResponse: {
      success?: boolean;
      data?: components['schemas']['ExampleDetailResponse'];
      error?: components['schemas']['ExceptionDto'];
    };
    CommonResponseUserDetailDto: {
      success?: boolean;
      data?: components['schemas']['UserDetailDto'];
      error?: components['schemas']['ExceptionDto'];
    };
    UserDetailDto: {
      nickname?: string;
      profileImg?: string;
      gender?: string;
      ageRange?: string;
    };
    CommonResponseBoolean: {
      success?: boolean;
      data?: boolean;
      error?: components['schemas']['ExceptionDto'];
    };
    CommonResponseShortsResponseDTO: {
      success?: boolean;
      data?: components['schemas']['ShortsResponseDTO'];
      error?: components['schemas']['ExceptionDto'];
    };
    /** @description Shorts의 인기 지표 */
    PopularityMaticResDTO: {
      /**
       * Format: int32
       * @description 조회수
       * @example 1200
       */
      views?: number;
      /**
       * Format: int32
       * @description 댓글 수
       * @example 35
       */
      commentsCount?: number;
      /**
       * Format: int32
       * @description 좋아요 수
       * @example 300
       */
      likes?: number;
      /**
       * Format: int32
       * @description 싫어요 수
       * @example 15
       */
      dislikes?: number;
    };
    /** @description 사용자의 상호작용 정보 */
    ShortsLikeInteractionResponseDTO: {
      /**
       * @description 사용자가 좋아요를 눌렀는지 여부
       * @example true
       */
      userLike?: boolean;
      /**
       * @description 사용자가 싫어요를 눌렀는지 여부
       * @example false
       */
      userDislike?: boolean;
    };
    /** @description Shorts 정보에 대한 응답 DTO */
    ShortsResponseDTO: {
      /**
       * @description Shorts의 고유 ID
       * @example 6775805e1a08421aac32df42
       */
      shorts_id?: string;
      /**
       * @description M3U8 파일 URL
       * @example https://example.com/video.m3u8
       */
      m3u8_url?: string;
      /**
       * @description 사용자의 프로필 이미지 URL
       * @example https://example.com/user/profile.jpg
       */
      profile_img_url?: string;
      /**
       * @description 쇼츠 대한 한 줄 설명
       * @example 이 동영상은 애니메이션에 관한 내용입니다.
       */
      description?: string;
      user_like_interaction?: components['schemas']['ShortsLikeInteractionResponseDTO'];
      popularity_matic?: components['schemas']['PopularityMaticResDTO'];
    };
    CommonResponseListShortsInfoResDTO: {
      success?: boolean;
      data?: components['schemas']['ShortsInfoResDTO'][];
      error?: components['schemas']['ExceptionDto'];
    };
    FileInfoDTO: {
      /** Format: int32 */
      duration?: number;
      play_url?: string;
    };
    PopularityMaticDTO: {
      /** Format: int32 */
      views?: number;
      /** Format: int32 */
      likes?: number;
      /** Format: int32 */
      comments?: number;
      /** Format: int32 */
      dislikes?: number;
    };
    ShortsInfoResDTO: {
      id?: string;
      title?: string;
      description?: string;
      tags?: string[];
      file_info?: components['schemas']['FileInfoDTO'];
      popularity_matic?: components['schemas']['PopularityMaticDTO'];
      /** Format: date-time */
      created_at?: string;
    };
    CommonResponseProductFindDetailResponseDTO: {
      success?: boolean;
      data?: components['schemas']['ProductFindDetailResponseDTO'];
      error?: components['schemas']['ExceptionDto'];
    };
    /** @description 게시글 상세 조회 응답 DTO */
    ProductFindDetailResponseDTO: {
      /** @description 장터글 제목 */
      title?: string;
      /** @description 장터글 내용 */
      description?: string;
      /** @description 장터글 가격 */
      price?: number;
      /**
       * @description 판매 상태
       * @example ACTIVE == 판매중
       * @enum {string}
       */
      status?: 'ACTIVE' | 'INACTIVE';
      /**
       * Format: date-time
       * @description 생성일
       */
      createdAt?: string;
      /**
       * Format: int64
       * @description 조회수
       */
      viewCount?: number;
      /** @description 이미지 리스트 */
      imageUrlList?: string[];
    };
    PostListRequestDTO: {
      /**
       * @description 정렬 기준, id = latest, 조회수 = views, 좋아요 = likes
       * @default latest
       */
      sortFilterType: string;
      /**
       * Format: int64
       * @description 정렬 기준의 마지막 값(id, 조회수, 좋아요)
       */
      lastValue?: number;
      /**
       * Format: int32
       * @description 페이지당 항목 수
       * @default 20
       */
      limit: number;
      /** @description 검색어 */
      keyword?: string;
      /**
       * Format: int64
       * @description 카테고리 ID
       */
      categoryId?: number;
      asc?: boolean;
    };
    CommonResponsePostListResponseDTO: {
      success?: boolean;
      data?: components['schemas']['PostListResponseDTO'];
      error?: components['schemas']['ExceptionDto'];
    };
    /** @description 게시글 정보 */
    FindAllPostQuerydslDTO: {
      /**
       * Format: int64
       * @description 게시글 ID
       */
      id?: number;
      /**
       * Format: int64
       * @description 유저 ID
       */
      userId?: number;
      /**
       * Format: int64
       * @description 카테고리 ID
       */
      categoryId?: number;
      /** @description 게시글 제목 */
      title?: string;
      /** @description 게시글 본문 */
      content?: string;
      /** @description 저장된 이미지 URL */
      imageUrl?: string;
      /**
       * Format: date-time
       * @description 저장된 게시글 시간(update되면 update된 시간 반영)
       */
      updatedAt?: string;
      /**
       * Format: int64
       * @description 조회수
       */
      views?: number;
    };
    PostListResponseDTO: {
      /**
       * Format: int64
       * @description 해당 카테고리에 접속된 게시글 수(삭제된 글 제외)
       */
      postCount?: number;
      /** @description 게시글 정보 */
      responsePostList?: components['schemas']['FindAllPostQuerydslDTO'][];
    };
    AnimationGenre: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: int64 */
      id?: number;
      genreName?: string;
      categoryGenres?: components['schemas']['CategoryGenre'][];
    };
    Category: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: int64 */
      id?: number;
      name?: string;
      createdType?: string;
      status?: string;
      /** Format: int64 */
      viewCount?: number;
      user?: components['schemas']['User'];
      categoryImages?: components['schemas']['CategoryImage'][];
      categoryGenres?: components['schemas']['CategoryGenre'][];
    };
    CategoryGenre: {
      /** Format: int64 */
      id?: number;
      category?: components['schemas']['Category'];
      genre?: components['schemas']['AnimationGenre'];
    };
    CategoryImage: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: int64 */
      id?: number;
      category?: components['schemas']['Category'];
    };
    CommunityImage: {
      /** Format: int64 */
      id?: number;
      image?: components['schemas']['Image'];
      post?: components['schemas']['Post'];
    };
    GrantedAuthority: {
      authority?: string;
    };
    Image: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: int64 */
      id?: number;
      user?: components['schemas']['User'];
      fileName?: string;
      imageUrl?: string;
      originalName?: string;
      fileType?: string;
      /** Format: int32 */
      fileSize?: number;
      /** Format: date-time */
      deletedAt?: string;
    };
    Post: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: int64 */
      id?: number;
      user?: components['schemas']['User'];
      category?: components['schemas']['Category'];
      communityImages?: components['schemas']['CommunityImage'][];
      title?: string;
      content?: string;
      /** Format: int64 */
      views?: number;
      /** Format: date-time */
      deletedAt?: string;
    };
    PrincipalUser: {
      user?: components['schemas']['User'];
      enabled?: boolean;
      password?: string;
      username?: string;
      /** Format: int64 */
      userId?: number;
      authorities?: components['schemas']['GrantedAuthority'][];
      accountNonExpired?: boolean;
      accountNonLocked?: boolean;
      credentialsNonExpired?: boolean;
    };
    User: {
      /** Format: int64 */
      userId?: number;
      nickname?: string;
      providerType?: string;
      profileImg?: string;
      status?: string;
      domesticId?: string;
      gender?: string;
      ageRange?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      role?: string;
      email?: string;
      posts?: components['schemas']['Post'][];
    };
    CommonResponsePostDetailResponseDTO: {
      success?: boolean;
      data?: components['schemas']['PostDetailResponseDTO'];
      error?: components['schemas']['ExceptionDto'];
    };
    PostDetailResponseDTO: {
      /**
       * Format: int64
       * @description 게시글 ID
       */
      postId?: number;
      /** @description 게시글 제목 */
      title?: string;
      /** @description 게시글 본문 */
      content?: string;
      /**
       * Format: date-time
       * @description 저장된 게시글 시간(update되면 update된 시간 반영)
       */
      updateAt?: string;
      /**
       * Format: int64
       * @description 조회수
       */
      viewCount?: number;
      /** @description 봤는지 안봤는지? 윤정님 확인 필요 */
      owner?: boolean;
      /** @description 보여줄 이미지 URL */
      imageUrls?: string[];
    };
    RequestCategorySearch: {
      name?: string;
      genreIds?: number[];
    };
    Pageable: {
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      size?: number;
      sort?: string[];
    };
    CommonResponsePageResponseCategorySeachDTO: {
      success?: boolean;
      data?: components['schemas']['PageResponseCategorySeachDTO'];
      error?: components['schemas']['ExceptionDto'];
    };
    PageResponseCategorySeachDTO: {
      /** Format: int32 */
      totalPages?: number;
      /** Format: int64 */
      totalElements?: number;
      /** Format: int32 */
      size?: number;
      content?: components['schemas']['ResponseCategorySeachDTO'][];
      /** Format: int32 */
      number?: number;
      sort?: components['schemas']['SortObject'];
      pageable?: components['schemas']['PageableObject'];
      first?: boolean;
      last?: boolean;
      /** Format: int32 */
      numberOfElements?: number;
      empty?: boolean;
    };
    PageableObject: {
      /** Format: int64 */
      offset?: number;
      sort?: components['schemas']['SortObject'];
      paged?: boolean;
      /** Format: int32 */
      pageNumber?: number;
      /** Format: int32 */
      pageSize?: number;
      unpaged?: boolean;
    };
    ResponseCategorySeachDTO: {
      /** Format: int64 */
      id?: number;
      name?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      status?: string;
      /** Format: int64 */
      viewCount?: number;
      /** Format: int64 */
      categoryCreateUserId?: number;
      categoryCreateNickname?: string;
      categoryCreateUserProfileImageUrl?: string;
      /** Format: int64 */
      imageId?: number;
      imageUrl?: string;
      genreId?: number[];
      genreName?: string[];
    };
    SortObject: {
      empty?: boolean;
      sorted?: boolean;
      unsorted?: boolean;
    };
    CommonResponseResponseCategoryDTO: {
      success?: boolean;
      data?: components['schemas']['ResponseCategoryDTO'];
      error?: components['schemas']['ExceptionDto'];
    };
    RequestSearchProfanityDTO: {
      userName?: string;
      keyword?: string;
      explaination?: string;
    };
    CommonResponsePageProfannityResponseDTO: {
      success?: boolean;
      data?: components['schemas']['PageProfannityResponseDTO'];
      error?: components['schemas']['ExceptionDto'];
    };
    PageProfannityResponseDTO: {
      /** Format: int32 */
      totalPages?: number;
      /** Format: int64 */
      totalElements?: number;
      /** Format: int32 */
      size?: number;
      content?: components['schemas']['ProfannityResponseDTO'][];
      /** Format: int32 */
      number?: number;
      sort?: components['schemas']['SortObject'];
      pageable?: components['schemas']['PageableObject'];
      first?: boolean;
      last?: boolean;
      /** Format: int32 */
      numberOfElements?: number;
      empty?: boolean;
    };
    ProfannityResponseDTO: {
      /** Format: int64 */
      id?: number;
      /** Format: int64 */
      userId?: number;
      nickname?: string;
      keyword?: string;
      explaination?: string;
      /** @enum {string} */
      status?: 'ACTIVE' | 'INACTIVE';
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  findProductDetail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 게시글 ID */
        productId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 게시글 수정 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseProductFindDetailResponseDTO'];
        };
      };
      /** @description 존재하지 않는 게시글 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseProductFindDetailResponseDTO'];
        };
      };
    };
  };
  updateProduct: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 게시글 ID */
        productId: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': {
          updateDTO: components['schemas']['ProductUpdateRequestDTO'];
          /** @description 새로 업로드한 이미지 파일 */
          updateImage?: string[];
        };
      };
    };
    responses: {
      /** @description 게시글 수정 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
      /** @description 인증되지 않은 접근 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
      /** @description 존재하지 않는 게시글 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
      /** @description 존재하지 않는 카테고리 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
    };
  };
  deleteProduct: {
    parameters: {
      query: {
        /** @description 카테고리 ID */
        categoryId: number;
      };
      header?: never;
      path: {
        /** @description 게시글 ID */
        productId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 게시글 삭제 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseVoid'];
        };
      };
      /** @description 인증되지 않은 접근 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseVoid'];
        };
      };
      /** @description 존재하지 않는 게시글 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseVoid'];
        };
      };
      /** @description 존재하지 않는 카테고리 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseVoid'];
        };
      };
    };
  };
  findPostDetail: {
    parameters: {
      query: {
        /** @description 조회를 했는지 여부 */
        canAddView: boolean;
        /** @description 유저 정보?? 윤정님 확인 필요 */
        principalUser: components['schemas']['PrincipalUser'];
      };
      header?: never;
      path: {
        /** @description 게시글 ID */
        postId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponsePostDetailResponseDTO'];
        };
      };
    };
  };
  updatePost: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 게시글 ID */
        postId: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': {
          updatePost: components['schemas']['PostUpdateRequestDTO'];
          /** @description 새로 업로드할 이미지 파일 */
          updatePostImage?: string[];
        };
      };
    };
    responses: {
      /** @description 게시글 수정 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
      /** @description 인증되지 않은 접근 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
      /** @description 존재하지 않는 게시글 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
      /** @description 존재하지 않는 카테고리 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
    };
  };
  deletePost: {
    parameters: {
      query: {
        /** @description 카테고리 ID */
        categoryId: number;
      };
      header?: never;
      path: {
        /** @description 게시글 ID */
        postId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 게시글 삭제 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
      /** @description 인증되지 않은 접근 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
      /** @description 존재하지 않는 게시글 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
      /** @description 존재하지 않는 카테고리 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
    };
  };
  updateComments: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 댓글 ID */
        commentsId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CommentsUpdateRequestDTO'];
      };
    };
    responses: {
      /** @description 댓글 수정 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
      /** @description 인증 되지 않은 접근 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
      /** @description 존재하지 않는 댓글 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
    };
  };
  deleteComments: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 댓글 ID */
        commentsId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 댓글 수정 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseVoid'];
        };
      };
      /** @description 인증 되지 않은 접근 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseVoid'];
        };
      };
      /** @description 존재하지 않는 댓글 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseVoid'];
        };
      };
    };
  };
  updateProfanityFilter: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestUpdateProfanityDTO'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseVoid'];
        };
      };
    };
  };
  deleteProfanityFilter: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseVoid'];
        };
      };
    };
  };
  uploadFile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          file: string;
        };
      };
    };
    responses: {
      /** @description File upload : SUCCESS */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Bad Request: Invalid input data. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  findExampleList: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListExampleDetailResponse'];
        };
      };
    };
  };
  createExample: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ExampleCreateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseString'];
        };
      };
    };
  };
  updateExample: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ExampleUpdateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseString'];
        };
      };
    };
  };
  registerUser: {
    parameters: {
      query?: never;
      header: {
        /**
         * @description OAuth 인증 후 발급받은 임시 토큰
         * @example Bearer eyJhbGciOiJIUzI1NiJ9.eyJhZ2VfcmFuZ2...
         */
        'X-Registration-Token': string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          user: components['schemas']['RequestRegisterUser'];
          /**
           * Format: binary
           * @description 프로필 이미지 파일 (png, jpg, jpeg만 가능)
           */
          profileImage?: string;
        };
      };
    };
    responses: {
      /** @description 유저 등록 성공 */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseString'];
        };
      };
      /** @description 유효하지 않은 토큰 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseString'];
        };
      };
      /** @description 유저 이미 존재 */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseString'];
        };
      };
      /** @description 파일 업로드 실패 */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseString'];
        };
      };
    };
  };
  uploadFile_1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': components['schemas']['ShortsCreateReqDTO'];
      };
    };
    responses: {
      /** @description API 요청 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseString'];
        };
      };
      /** @description 입력한 값의 유효성이 올바르지 않을 때 */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseString'];
        };
      };
      /** @description 사용자 로그인이 되어있지 않았을 때 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseString'];
        };
      };
    };
  };
  addLike: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 쇼츠 아이디 */
        shortsId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 쇼츠 좋아요 생성 완료. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseVoid'];
        };
      };
      /** @description 회원 인증이 되지 않았습니다. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseVoid'];
        };
      };
      /** @description 쇼츠 정보를 찾을 수 없습니다. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseVoid'];
        };
      };
    };
  };
  cancelLike: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 쇼츠 아이디 */
        shortsId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 쇼츠 좋아요 취소간 다 완료. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseVoid'];
        };
      };
      /** @description 회원 인증이 되지 않았습니다. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseVoid'];
        };
      };
      /** @description 쇼츠 정보를 찾을 수 없습니다. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseVoid'];
        };
      };
    };
  };
  findShortsComment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 쇼츠 아이디 */
        shortsId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Shorts comment : SUCCESS */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListShortsCommentDTO'];
        };
      };
    };
  };
  createShortsComment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 쇼츠 아이디 */
        shortsId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ShortsCommentCreateReqDTO'];
      };
    };
    responses: {
      /** @description Shorts comment : SUCCESS */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListShortsCommentDTO'];
        };
      };
      /** @description Not Found: Shorts not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListShortsCommentDTO'];
        };
      };
      /** @description Internal Server Error: Shorts save error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListShortsCommentDTO'];
        };
      };
    };
  };
  createShortsReply: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 쇼츠 아이디 */
        shortsId: string;
        /** @description 댓글 아이디 */
        commentId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ShortsCommentCreateReqDTO'];
      };
    };
    responses: {
      /** @description Shorts comment reply : SUCCESS */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListShortsCommentDTO'];
        };
      };
      /** @description Not Found: Shorts comment not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListShortsCommentDTO'];
        };
      };
      /** @description Internal Server Error: Shorts comment reply save error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListShortsCommentDTO'];
        };
      };
    };
  };
  createProduct: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          createDTO: components['schemas']['ProductCreateRequestDTO'];
          /** @description 판매글 첨부 이미지(필수값 아님) */
          productImage?: string[];
        };
      };
    };
    responses: {
      /** @description 게시글 생성 성공 */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
      /** @description 인증되지 않은 접근 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
      /** @description 존재하지 않는 카테고리 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
    };
  };
  findAllPostList: {
    parameters: {
      query: {
        /** @description 커뮤니티 글 전체 조회 DTO */
        postListRequestDTO: components['schemas']['PostListRequestDTO'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 게시글 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponsePostListResponseDTO'];
        };
      };
    };
  };
  createPost: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': {
          createPost: components['schemas']['PostCreateRequestDTO'];
          /** @description 게시글 첨부 이미지(필수값 아님) */
          postImage?: string[];
        };
      };
    };
    responses: {
      /** @description 게시글 생성 성공 */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
      /** @description 인증되지 않은 접근 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
      /** @description 존재하지 않는 카테고리 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
    };
  };
  createComments: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CommentsCreateRequestDTO'];
      };
    };
    responses: {
      /** @description 댓글 작성 성공 */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
      /** @description 존재하지 않는 댓글 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
    };
  };
  searchCategories: {
    parameters: {
      query: {
        requestCategorySearch: components['schemas']['RequestCategorySearch'];
        pageable: components['schemas']['Pageable'];
        /** @description 페이지 번호 (0부터 시작) */
        page?: number;
        /** @description 페이지 크기 */
        size?: number;
        /** @description 정렬 기준 (예: name,asc 또는 name,desc) */
        sort?: string;
        /** @description 카테고리 이름으로 검색 */
        name?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponsePageResponseCategorySeachDTO'];
        };
      };
    };
  };
  createCategory: {
    parameters: {
      query?: never;
      header: {
        /**
         * @description JWT 토큰
         * @example Bearer eyJhbGciOiJIUzI1NiJ9.eyJhZ2VfcmFuZ2...
         */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          category: components['schemas']['RequestCategoryCreateDTO'];
          /**
           * Format: binary
           * @description 카테고리 이미지
           */
          image: string;
        };
      };
    };
    responses: {
      /** @description 카테고리 생성 성공 */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseCategoryDTO'];
        };
      };
      /** @description 잘못된 요청 */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ExceptionDto'];
        };
      };
      /** @description 인증되지 않은 사용자 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ExceptionDto'];
        };
      };
      /** @description 존재하지 않은 장르 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ExceptionDto'];
        };
      };
    };
  };
  logout: {
    parameters: {
      query?: never;
      header: {
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseString'];
        };
      };
    };
  };
  getProfanityFilters: {
    parameters: {
      query: {
        requestSearchProfanityDTO: components['schemas']['RequestSearchProfanityDTO'];
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponsePageProfannityResponseDTO'];
        };
      };
    };
  };
  createProfanityFilter: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestCreateProfanityDTO'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseResponseCreateProfanityDTO'];
        };
      };
    };
  };
  findUserDetail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 유저 개인 id */
        userId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseUserDetailDto'];
        };
      };
    };
  };
  deleteUser: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description 유저 ID
         * @example 1
         */
        userId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 유저 삭제 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseString'];
        };
      };
      /** @description 존재 하지 않거나,이미 삭제된 유저입니다. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseString'];
        };
      };
    };
  };
  editUserDetail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 유저 개인 id */
        userId: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': {
          /** Format: binary */
          image?: string;
          /** Format: binary */
          request?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseString'];
        };
      };
    };
  };
  deleteShortsComment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 쇼츠 아이디 */
        shortsId: string;
        /** @description 댓글 아이디 */
        commentId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Shorts comment : SUCCESS */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListShortsCommentDTO'];
        };
      };
      /** @description Unauthorized: User not authenticated. */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListShortsCommentDTO'];
        };
      };
      /** @description Not Found: Shorts comment not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListShortsCommentDTO'];
        };
      };
      /** @description Internal Server Error: Shorts comment delete error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListShortsCommentDTO'];
        };
      };
    };
  };
  updateShortsComment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 쇼츠 아이디 */
        shortsId: string;
        /** @description 댓글 아이디 */
        commentId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ShortsCommentUpdateReqDTO'];
      };
    };
    responses: {
      /** @description Shorts comment : SUCCESS */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListShortsCommentDTO'];
        };
      };
      /** @description Unauthorized: User not authenticated. */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListShortsCommentDTO'];
        };
      };
      /** @description Not Found: Shorts comment not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListShortsCommentDTO'];
        };
      };
      /** @description Internal Server Error: Shorts comment update error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListShortsCommentDTO'];
        };
      };
    };
  };
  deleteShortsReply: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 쇼츠 아이디 */
        shortsId: string;
        /** @description 댓글 아이디 */
        commentId: string;
        /** @description 대댓글 아이디 */
        replyId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Shorts comment reply : SUCCESS */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListShortsCommentDTO'];
        };
      };
      /** @description Unauthorized: User not authenticated. */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListShortsCommentDTO'];
        };
      };
      /** @description Not Found: Shorts comment reply not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListShortsCommentDTO'];
        };
      };
      /** @description Internal Server Error: Shorts comment reply delete error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListShortsCommentDTO'];
        };
      };
    };
  };
  updateShortsReply: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 쇼츠 아이디 */
        shortsId: string;
        /** @description 댓글 아이디 */
        commentId: string;
        /** @description 대댓글 아이디 */
        replyId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ShortsCommentUpdateReqDTO'];
      };
    };
    responses: {
      /** @description Shorts comment reply : SUCCESS */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListShortsCommentDTO'];
        };
      };
      /** @description Unauthorized: User not authenticated. */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListShortsCommentDTO'];
        };
      };
      /** @description Not Found: Shorts comment reply not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListShortsCommentDTO'];
        };
      };
      /** @description Internal Server Error: Shorts comment reply update error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListShortsCommentDTO'];
        };
      };
    };
  };
  downloadFile: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        fileName: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description File download : SUCCESS */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Bad Request: Invalid input data. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  findExampleById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @example 042482cb-f1cd-4935-9579-e12da625961f */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseExampleDetailResponse'];
        };
      };
    };
  };
  findExampleByTitle: {
    parameters: {
      query: {
        exampleTitle: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListExampleDetailResponse'];
        };
      };
    };
  };
  checkNickname: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description 닉네임
         * @example looco
         */
        nickname: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 닉네임 중복여부 확인 성공 <code>true : 중복, false : 중복X</code> */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseBoolean'];
        };
      };
    };
  };
  findShortsInfo: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 조회할 쇼츠의 고유 ID */
        shortsId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 파일 정보 불러오기에 성공했습니다. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseShortsResponseDTO'];
        };
      };
      /** @description 파일 정보를 찾을 수 없습니다. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseShortsResponseDTO'];
        };
      };
    };
  };
  getRecommendShorts: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Shorts recommend : SUCCESS */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListShortsInfoResDTO'];
        };
      };
    };
  };
  findCategoryById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 카테고리 ID */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseResponseCategoryDTO'];
        };
      };
    };
  };
}
