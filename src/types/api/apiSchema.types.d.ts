/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/posts/{postId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 커뮤니티 게시글 상세 조회
     * @description 1. 게시글 상세 조회(댓글은 나중에 작업)
     *
     */
    get: operations['findPostDetail'];
    /**
     * 커뮤니티 게시글 수정
     * @description updatePost(type: application/json)
     *     1. categoryId: 접속한 카테고리 ID
     *     2. title: 작성한 제목
     *     3. content: 작성한 내용
     *     4. imageList: 업로드한 이미지 정보(List)
     *         1) originalFileName: 업로드 파일명
     *         2) fileType: 파일 타입
     *         3) fileSize: 크기
     *
     *     postImage(type: multipartFile)
     *     - 이미지데이터
     *
     */
    put: operations['updatePost'];
    post?: never;
    /** 커뮤니티 게시글 삭제 */
    delete: operations['deletePost'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/profanity/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: operations['updateProfanityFilter'];
    post?: never;
    delete: operations['deleteProfanityFilter'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/file/upload': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 파일 업로드
     * @description 파일을 스토리지에 업로드합니다.
     */
    post: operations['uploadFile'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/example': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 예시 다건 조회 */
    get: operations['findExampleList'];
    put?: never;
    /** 예시 생성 */
    post: operations['createExample'];
    delete?: never;
    options?: never;
    head?: never;
    /** 예시 단건 수정 */
    patch: operations['updateExample'];
    trace?: never;
  };
  '/api/user': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 유저 등록
     * @description 유저를 등록합니다.
     */
    post: operations['registerUser'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/posts': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 커뮤니티 게시글 조회(정렬, 검색)
     * @description 필터 조건, 검색어, 정렬 순서에 따라 카테고리 별 게시글 목록을 조회
     *     1. filter: 정렬 기준 선택
     *         - latest: 최신순  (기준 값: 게시글 Id)
     *         - likes : 좋아요순 (기준 값: 좋아요 수)
     *         - views : 조회수순 (기준 값: 조회수)
     *
     *     2. lastValue: 선택 된 정렬 기준의 마지막 정수 값, 타입 Long
     *         - 정렬 기준이 최신 순이면 현재 데이터의 마지막 Id 값
     *         - 정렬 기준이 좋아요 순이면 현재 데이터의 마지막 좋아요 값
     *         - 정렬 기준이 조회수 순이면 현재 데이터의 마지막 조회수 값
     *
     *     3. isAsc: 내림차순, 오름차순 여부
     *         - false: 기본값, 내림차순
     *         - true: 오름차순
     *
     *     4. limit: 출력 페이지 개수
     *         - 20개 (피그마에서는 5개였으나 확인이 필요함)
     *
     *     5. keyword: 게시글 제목 + 내용 검색어
     *
     *     6. categoryId: 게시글이 속한 카테고리 ID
     *
     */
    get: operations['findAllPost'];
    put?: never;
    /**
     * 커뮤니티 게시글 생성
     * @description createPost(type: application/json)
     *     1. categoryId: 접속한 카테고리 ID
     *     2. title: 작성한 제목
     *     3. content: 작성한 내용
     *     4. imageList: 업로드한 이미지 정보(List)
     *         1) originalFileName: 업로드 파일명
     *         2) fileType: 파일 타입
     *         3) fileSize: 크기
     *
     *     postImage(type: multipartFile)
     *     - 이미지데이터
     *
     */
    post: operations['createPost'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/category': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 카테고리 검색
     * @description 카테고리를 검색합니다. 페이징과 정렬을 지원합니다.
     */
    get: operations['searchCategories'];
    put?: never;
    /**
     * 카테고리 생성
     * @description 새로운 카테고리를 생성합니다. 카테고리 정보와 이미지를 함께 업로드해야 합니다.
     */
    post: operations['createCategory'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/auth/logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['logout'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/profanity': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getProfanityFilters'];
    put?: never;
    post: operations['createProfanityFilter'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/user/{userId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 유저 정보 조회
     * @description 유저 프로필, 닉네임, 성별, 나이대 조회
     */
    get: operations['findUserDetail'];
    put?: never;
    post?: never;
    /**
     * 유저 삭제
     * @description 유저 삭제
     */
    delete: operations['deleteUser'];
    options?: never;
    head?: never;
    /**
     * 유저 정보 수정
     * @description 유저 프로필, 닉네임 정보 수정
     */
    patch: operations['editUserDetail'];
    trace?: never;
  };
  '/file/download/{fileName}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 파일 다운로드
     * @description 파일을 스토리지에서 다운로드합니다.
     */
    get: operations['downloadFile'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/example/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 예시 단건 조회 */
    get: operations['findExampleById'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/example/querydsl/title': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** QueryDSL 예시 조회 */
    get: operations['findExampleByTitle'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/user/nickname/{nickname}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 닉네임 중복여부 확인
     * @description 닉네임 중복여부 확인
     */
    get: operations['checkNickname'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/category/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 카테고리 상세 조회
     * @description 카테고리 ID로 상세 정보를 조회합니다.
     */
    get: operations['findCategoryById'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    AnimationGenre: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: int64 */
      id?: number;
      genreName?: string;
      categoryGenres?: components['schemas']['CategoryGenre'][];
    };
    Category: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: int64 */
      id?: number;
      name?: string;
      createdType?: string;
      status?: string;
      /** Format: int64 */
      viewCount?: number;
      user?: components['schemas']['User'];
      categoryImages?: components['schemas']['CategoryImage'][];
      categoryGenres?: components['schemas']['CategoryGenre'][];
    };
    CategoryGenre: {
      /** Format: int64 */
      id?: number;
      category?: components['schemas']['Category'];
      genre?: components['schemas']['AnimationGenre'];
    };
    CategoryImage: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: int64 */
      id?: number;
      category?: components['schemas']['Category'];
    };
    CommunityImage: {
      /** Format: int64 */
      id?: number;
      image?: components['schemas']['Image'];
      post?: components['schemas']['Post'];
    };
    GrantedAuthority: {
      authority?: string;
    };
    Image: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: int64 */
      id?: number;
      user?: components['schemas']['User'];
      fileName?: string;
      imageUrl?: string;
      originalName?: string;
      fileType?: string;
      /** Format: int32 */
      fileSize?: number;
      /** Format: date-time */
      deletedAt?: string;
    };
    Post: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: int64 */
      id?: number;
      user?: components['schemas']['User'];
      category?: components['schemas']['Category'];
      communityImages?: components['schemas']['CommunityImage'][];
      title?: string;
      content?: string;
      /** Format: int64 */
      views?: number;
      /** Format: int64 */
      likes?: number;
      /** Format: date-time */
      deletedAt?: string;
      userInternal?: components['schemas']['User'];
    };
    PrincipalUser: {
      user?: components['schemas']['User'];
      enabled?: boolean;
      accountNonExpired?: boolean;
      password?: string;
      username?: string;
      /** Format: int64 */
      userId?: number;
      authorities?: components['schemas']['GrantedAuthority'][];
      accountNonLocked?: boolean;
      credentialsNonExpired?: boolean;
    };
    User: {
      /** Format: int64 */
      userId?: number;
      nickname?: string;
      providerType?: string;
      profileImg?: string;
      status?: string;
      domesticId?: string;
      gender?: string;
      ageRange?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      role?: string;
      email?: string;
      posts?: components['schemas']['Post'][];
    };
    /** @description 첨부파일 이미지 */
    ImageCreateRequestDTO: {
      /** @description 업로드된 파일명 */
      originalFileName?: string;
      /** @description 파일 타입 */
      fileType?: string;
      /**
       * Format: int32
       * @description 파일용량
       */
      fileSize?: number;
    };
    PostCreateUpdateRequestDTO: {
      /**
       * Format: int64
       * @description 카테고리Id
       */
      categoryId?: number;
      /** @description 제목 */
      title?: string;
      /** @description 내용 */
      content?: string;
      /** @description 첨부파일 이미지 */
      imagelist?: components['schemas']['ImageCreateRequestDTO'][];
    };
    CommonResponseLong: {
      success?: boolean;
      /** Format: int64 */
      data?: number;
      error?: components['schemas']['ExceptionDto'];
    };
    ExceptionDto: {
      /** Format: int32 */
      code: number;
      message: string;
    };
    RequestUpdateProfanityDTO: {
      keyword?: string;
      explaination?: string;
      /** @enum {string} */
      status: 'ACTIVE' | 'INACTIVE';
    };
    CommonResponseVoid: {
      success?: boolean;
      data?: Record<string, never>;
      error?: components['schemas']['ExceptionDto'];
    };
    /** @description 예제 생성 요청 */
    ExampleCreateRequest: {
      /**
       * @description 예제 제목
       * @example 예제 제목입니다.
       */
      exampleTitle: string;
      /**
       * @description 예제 내용
       * @example 예제 내용입니다.
       */
      exampleContent: string;
    };
    CommonResponseString: {
      success?: boolean;
      data?: string;
      error?: components['schemas']['ExceptionDto'];
    };
    /** @description 유저 정보 (<code>RequestRegisterUser</code> 스키마 참고) <code>Content-Type : application/json</code> */
    RequestRegisterUser: {
      /**
       * @description 유저 닉네임
       * @example looco
       */
      nickname?: string;
      /**
       * @description 유저 프로바이더 타입
       * @example {kakao , google}
       * @enum {string}
       */
      provider_type?: 'KAKAO' | 'NAVER' | 'GOOGLE';
    };
    /** @description 카테고리 정보 <code>RequestCategoryCreateDTO</code> 스키마 참고 <code>Content-Type: application/json</code> */
    RequestCategoryCreateDTO: {
      category_name?: string;
      ani_genre_id?: number[];
    };
    CategoryGenreDTO: {
      /** Format: int64 */
      id?: number;
      name?: string;
    };
    CategoryImageDTO: {
      /** Format: int64 */
      id?: number;
      imageUrl?: string;
      fileName?: string;
      originalFileName?: string;
    };
    ResponseCategoryDTO: {
      /** Format: int64 */
      id?: number;
      name?: string;
      status?: string;
      createdType?: string;
      /** Format: int64 */
      viewCount?: number;
      categoryImages?: components['schemas']['CategoryImageDTO'][];
      categoryGenres?: components['schemas']['CategoryGenreDTO'][];
    };
    RequestCreateProfanityDTO: {
      keyword: string;
      explaination: string;
    };
    CommonResponseResponseCreateProfanityDTO: {
      success?: boolean;
      data?: components['schemas']['ResponseCreateProfanityDTO'];
      error?: components['schemas']['ExceptionDto'];
    };
    ResponseCreateProfanityDTO: {
      /** Format: int64 */
      id?: number;
      /** Format: int64 */
      userId?: number;
      keyword?: string;
      explaination?: string;
      /** @enum {string} */
      status?: 'ACTIVE' | 'INACTIVE';
      /** Format: date-time */
      createdAt?: string;
    };
    /** @description 예제 생성 요청 */
    ExampleUpdateRequest: {
      /**
       * Format: uuid
       * @description 예제 ID
       */
      exampleId?: string;
      /**
       * @description 예제 제목수정
       * @example 예제 제목수정.
       */
      exampleTitle: string;
      /**
       * @description 예제 내용 수정
       * @example 예제 내용수정.
       */
      exampleContent: string;
    };
    CommonResponseListExampleDetailResponse: {
      success?: boolean;
      data?: components['schemas']['ExampleDetailResponse'][];
      error?: components['schemas']['ExceptionDto'];
    };
    /** @description 예제 상세 응답 */
    ExampleDetailResponse: {
      /**
       * Format: uuid
       * @description 예제 ID
       * @example 2be8119a-b655-419c-92c9-7db023432041
       */
      exampleId?: string;
      /**
       * @description 예제 제목
       * @example 예제 제목입니다.
       */
      exampleTitle?: string;
      /**
       * @description 예제 내용
       * @example 예제 내용입니다.
       */
      exampleContent?: string;
    };
    CommonResponseExampleDetailResponse: {
      success?: boolean;
      data?: components['schemas']['ExampleDetailResponse'];
      error?: components['schemas']['ExceptionDto'];
    };
    CommonResponseUserDetailDto: {
      success?: boolean;
      data?: components['schemas']['UserDetailDto'];
      error?: components['schemas']['ExceptionDto'];
    };
    UserDetailDto: {
      nickname?: string;
      profileImg?: string;
      gender?: string;
      ageRange?: string;
    };
    CommonResponseBoolean: {
      success?: boolean;
      data?: boolean;
      error?: components['schemas']['ExceptionDto'];
    };
    PostListRequestDTO: {
      /**
       * @description 정렬 기준
       * @default latest
       * @enum {string}
       */
      filter: 'LATEST' | 'VIEWS' | 'LIKES' | 'PRICE_DESC' | 'PRICE_ASC';
      /**
       * Format: int64
       * @description 정렬 기준의 마지막 값
       */
      lastValue?: number;
      /**
       * Format: int32
       * @description 페이지당 항목 수
       * @default 20
       */
      limit: number;
      /** @description 검색어 */
      keyword?: string;
      /**
       * Format: int64
       * @description 카테고리 ID
       */
      categoryId?: number;
      asc?: boolean;
    };
    CommonResponseListPostListResponseDTO: {
      success?: boolean;
      data?: components['schemas']['PostListResponseDTO'][];
      error?: components['schemas']['ExceptionDto'];
    };
    PostListResponseDTO: {
      /** Format: int64 */
      id?: number;
      /** Format: int64 */
      userId?: number;
      /** Format: int64 */
      categoryId?: number;
      title?: string;
      content?: string;
      imageUrl?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: int64 */
      views?: number;
      /** Format: int64 */
      likes?: number;
    };
    CommonResponsePostDetailResponseDTO: {
      success?: boolean;
      data?: components['schemas']['PostDetailResponseDTO'];
      error?: components['schemas']['ExceptionDto'];
    };
    PostDetailResponseDTO: {
      /** Format: int64 */
      postId?: number;
      title?: string;
      content?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: int64 */
      viewCount?: number;
      /** Format: int64 */
      likes?: number;
      owner?: boolean;
      imageUrls?: string[];
    };
    RequestCategorySearch: {
      name?: string;
      genreIds?: number[];
    };
    Pageable: {
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      size?: number;
      sort?: string[];
    };
    CommonResponsePageResponseCategorySeachDTO: {
      success?: boolean;
      data?: components['schemas']['PageResponseCategorySeachDTO'];
      error?: components['schemas']['ExceptionDto'];
    };
    PageResponseCategorySeachDTO: {
      /** Format: int32 */
      totalPages?: number;
      /** Format: int64 */
      totalElements?: number;
      /** Format: int32 */
      size?: number;
      content?: components['schemas']['ResponseCategorySeachDTO'][];
      /** Format: int32 */
      number?: number;
      sort?: components['schemas']['SortObject'];
      pageable?: components['schemas']['PageableObject'];
      /** Format: int32 */
      numberOfElements?: number;
      first?: boolean;
      last?: boolean;
      empty?: boolean;
    };
    PageableObject: {
      /** Format: int64 */
      offset?: number;
      sort?: components['schemas']['SortObject'];
      paged?: boolean;
      /** Format: int32 */
      pageNumber?: number;
      /** Format: int32 */
      pageSize?: number;
      unpaged?: boolean;
    };
    ResponseCategorySeachDTO: {
      /** Format: int64 */
      id?: number;
      name?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      status?: string;
      /** Format: int64 */
      viewCount?: number;
      /** Format: int64 */
      categoryCreateUserId?: number;
      categoryCreateNickname?: string;
      categoryCreateUserProfileImageUrl?: string;
      /** Format: int64 */
      imageId?: number;
      imageUrl?: string;
      genreId?: number[];
      genreName?: string[];
    };
    SortObject: {
      empty?: boolean;
      sorted?: boolean;
      unsorted?: boolean;
    };
    CommonResponseResponseCategoryDTO: {
      success?: boolean;
      data?: components['schemas']['ResponseCategoryDTO'];
      error?: components['schemas']['ExceptionDto'];
    };
    RequestSearchProfanityDTO: {
      userName?: string;
      keyword?: string;
      explaination?: string;
    };
    CommonResponsePageProfannityResponseDTO: {
      success?: boolean;
      data?: components['schemas']['PageProfannityResponseDTO'];
      error?: components['schemas']['ExceptionDto'];
    };
    PageProfannityResponseDTO: {
      /** Format: int32 */
      totalPages?: number;
      /** Format: int64 */
      totalElements?: number;
      /** Format: int32 */
      size?: number;
      content?: components['schemas']['ProfannityResponseDTO'][];
      /** Format: int32 */
      number?: number;
      sort?: components['schemas']['SortObject'];
      pageable?: components['schemas']['PageableObject'];
      /** Format: int32 */
      numberOfElements?: number;
      first?: boolean;
      last?: boolean;
      empty?: boolean;
    };
    ProfannityResponseDTO: {
      /** Format: int64 */
      id?: number;
      /** Format: int64 */
      userId?: number;
      nickname?: string;
      keyword?: string;
      explaination?: string;
      /** @enum {string} */
      status?: 'ACTIVE' | 'INACTIVE';
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  findPostDetail: {
    parameters: {
      query: {
        canAddView: boolean;
        principalUser: components['schemas']['PrincipalUser'];
      };
      header?: never;
      path: {
        postId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponsePostDetailResponseDTO'];
        };
      };
    };
  };
  updatePost: {
    parameters: {
      query: {
        principalUser: components['schemas']['PrincipalUser'];
      };
      header?: never;
      path: {
        postId: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': {
          updatePost: components['schemas']['PostCreateUpdateRequestDTO'];
          postImage?: string[];
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
    };
  };
  deletePost: {
    parameters: {
      query: {
        principalUser: components['schemas']['PrincipalUser'];
      };
      header?: never;
      path: {
        postId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
    };
  };
  updateProfanityFilter: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestUpdateProfanityDTO'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseVoid'];
        };
      };
    };
  };
  deleteProfanityFilter: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseVoid'];
        };
      };
    };
  };
  uploadFile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          file: string;
        };
      };
    };
    responses: {
      /** @description File upload : SUCCESS */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Bad Request: Invalid input data. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  findExampleList: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListExampleDetailResponse'];
        };
      };
    };
  };
  createExample: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ExampleCreateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseString'];
        };
      };
    };
  };
  updateExample: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ExampleUpdateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseString'];
        };
      };
    };
  };
  registerUser: {
    parameters: {
      query?: never;
      header: {
        /**
         * @description OAuth 인증 후 발급받은 임시 토큰
         * @example Bearer eyJhbGciOiJIUzI1NiJ9.eyJhZ2VfcmFuZ2...
         */
        'X-Registration-Token': string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          user: components['schemas']['RequestRegisterUser'];
          /**
           * Format: binary
           * @description 프로필 이미지 파일 (png, jpg, jpeg만 가능)
           */
          profileImage?: string;
        };
      };
    };
    responses: {
      /** @description 유저 등록 성공 */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseString'];
        };
      };
      /** @description 유효하지 않은 토큰 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseString'];
        };
      };
      /** @description 유저 이미 존재 */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseString'];
        };
      };
      /** @description 파일 업로드 실패 */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseString'];
        };
      };
    };
  };
  findAllPost: {
    parameters: {
      query: {
        requestDTO: components['schemas']['PostListRequestDTO'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListPostListResponseDTO'];
        };
      };
    };
  };
  createPost: {
    parameters: {
      query: {
        principalUser: components['schemas']['PrincipalUser'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': {
          createPost: components['schemas']['PostCreateUpdateRequestDTO'];
          postImage?: string[];
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseLong'];
        };
      };
    };
  };
  searchCategories: {
    parameters: {
      query: {
        requestCategorySearch: components['schemas']['RequestCategorySearch'];
        pageable: components['schemas']['Pageable'];
        /** @description 페이지 번호 (0부터 시작) */
        page?: number;
        /** @description 페이지 크기 */
        size?: number;
        /** @description 정렬 기준 (예: name,asc 또는 name,desc) */
        sort?: string;
        /** @description 카테고리 이름으로 검색 */
        name?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponsePageResponseCategorySeachDTO'];
        };
      };
    };
  };
  createCategory: {
    parameters: {
      query?: never;
      header: {
        /**
         * @description JWT 토큰
         * @example Bearer eyJhbGciOiJIUzI1NiJ9.eyJhZ2VfcmFuZ2...
         */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          category: components['schemas']['RequestCategoryCreateDTO'];
          /**
           * Format: binary
           * @description 카테고리 이미지
           */
          image: string;
        };
      };
    };
    responses: {
      /** @description 카테고리 생성 성공 */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseCategoryDTO'];
        };
      };
      /** @description 잘못된 요청 */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ExceptionDto'];
        };
      };
      /** @description 인증되지 않은 사용자 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ExceptionDto'];
        };
      };
      /** @description 존재하지 않은 장르 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ExceptionDto'];
        };
      };
    };
  };
  logout: {
    parameters: {
      query?: never;
      header: {
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseString'];
        };
      };
    };
  };
  getProfanityFilters: {
    parameters: {
      query: {
        requestSearchProfanityDTO: components['schemas']['RequestSearchProfanityDTO'];
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponsePageProfannityResponseDTO'];
        };
      };
    };
  };
  createProfanityFilter: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestCreateProfanityDTO'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseResponseCreateProfanityDTO'];
        };
      };
    };
  };
  findUserDetail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 유저 개인 id */
        userId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseUserDetailDto'];
        };
      };
    };
  };
  deleteUser: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description 유저 ID
         * @example 1
         */
        userId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 유저 삭제 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseString'];
        };
      };
      /** @description 존재 하지 않거나,이미 삭제된 유저입니다. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseString'];
        };
      };
    };
  };
  editUserDetail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 유저 개인 id */
        userId: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': {
          /** Format: binary */
          image?: string;
          /** Format: binary */
          request?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseString'];
        };
      };
    };
  };
  downloadFile: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        fileName: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description File download : SUCCESS */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Bad Request: Invalid input data. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  findExampleById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @example 042482cb-f1cd-4935-9579-e12da625961f */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseExampleDetailResponse'];
        };
      };
    };
  };
  findExampleByTitle: {
    parameters: {
      query: {
        exampleTitle: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseListExampleDetailResponse'];
        };
      };
    };
  };
  checkNickname: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description 닉네임
         * @example looco
         */
        nickname: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 닉네임 중복여부 확인 성공 <code>true : 중복, false : 중복X</code> */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseBoolean'];
        };
      };
    };
  };
  findCategoryById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 카테고리 ID */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['CommonResponseResponseCategoryDTO'];
        };
      };
    };
  };
}
